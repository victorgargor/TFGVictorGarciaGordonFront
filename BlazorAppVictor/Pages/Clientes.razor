@page "/clientes"
@using BlazorAppVictor.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject SweetAlertService Swal
@inject NavigationManager Navegador

<!-- CSS para la tabla y la paginación -->
<style>
	/* Aplicar box-sizing: border-box globalmente */
	*, *::before, *::after {
		box-sizing: border-box;
		margin: 0;
		padding: 0;
	}

	/* Contenedor principal */
	.container {
		min-height: 100vh;
		display: flex;
		flex-direction: column;
		justify-content: flex-start;
		align-items: center;
		padding: 20px;
	}

	/* Título */
	h3 {
		text-align: center;
		font-size: 40px;
		font-weight: bold;
		color: #333;
		margin-top: 50px;
		margin-bottom: 75px;
	}

	/* Botones */
	button {
		height: 40px;
		padding: 0;
		border: none;
		background: none;
	}

	/* Estilo para el formulario de búsqueda */
	.busqueda-form {
		margin-bottom: 20px;
	}

	/* Paginación */
	.pagination {
		display: flex;
		justify-content: center;
		align-items: center;
		margin-top: 20px;
		gap: 15px;
	}

	/* Estilo para el contenedor de la tabla */
	.table-container {
		max-height: none;
		margin-bottom: 30px;
	}

	/* Estilo de los inputs */
	.input-busqueda {
		width: 450px;
		height: 35px !important;
		margin-left: 40px;
	}

	.fechas-container {
		position: fixed;
		left: 950px;
		gap: 10px;
	}

		.fechas-container input {
			width: 150px;
			height: 35px;
			font-size: 16px;
			text-align: center;
		}

	.input-select {
		position: fixed;
		top: 247px;
		left: 808px;
		width: 100%;
		max-width: 150px;
		height: 35px;
		text-align: center;
		padding: 0;
	}

		.input-select option {
			text-align: center;
		}

	/* Botón Crear Cliente */
	.btn-crear {
		position: fixed;
		top: 247.5px;
		right: 66px;
		height: 35px;
		font-size: 16px;
		padding: 0 15px;
		border-radius: 5px;
		background-color: #007bff;
		border: none;
		color: white;
		font-weight: bold;
		transition: background-color 0.3s, box-shadow 0.3s;
		display: inline-block;
		margin-left: 15px;
		vertical-align: middle;
	}

		/* Botón Crear Cliente hover */
		.btn-crear:hover {
			background-color: #0056b3;
			box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
			cursor: pointer;
		}

		/* Botón Crear Cliente active */
		.btn-crear:active {
			background-color: #004085;
			box-shadow: none;
		}

	/* Ajustes adicionales */
	.fechas-container {
		display: flex;
		align-items: center;
		margin-left: 30px;
		gap: 10px;
		justify-content: flex-start;
	}

	.d-flex.justify-content-center {
		margin-top: 50px;
	}

	table{
		margin-top: 75px;
	}

	.table-container td {
		vertical-align: middle; /* Centra verticalmente el contenido */
	}

	/* ... resto del código CSS ... */
	/* Estilo para los iconos en los botones de acción */
	.table-container button i {
		font-size: 20px; /* Aumentar el tamaño de los iconos */
		margin-right: 5px; /* Añadir separación entre los iconos */
		margin-left: 10px;
	}

	/* Puedes ajustar aún más si deseas más espacio entre los iconos */
	.table-container button {
		margin-right: 10px; /* Agregar un pequeño espacio entre los botones */
	}
</style>

<h3>Clientes</h3>

<div class="busqueda-form mb-3">
	<div class="row align-items-center">
		<!-- Contenedor para los inputs de búsqueda y fechas -->
		<div class="col-md-3">
			<input placeholder="Buscar por DNI, nombre o apellidos" @bind="terminoBusqueda" class="form-control input-busqueda" />
		</div>
		<div class="col-md-2">
			<select @bind="estadoSeleccionado" class="form-control input-select">
				<option value="todos">Todos</option>
				<option value="activos">Activos</option>
				<option value="baja">De baja</option>
			</select>
		</div>
		<div class="col-md-4 fechas-container">
			<input type="date" @bind="fechaInicio" class="form-control input-fecha" />
			<input type="date" @bind="fechaFin" class="form-control input-fecha" />
			<button class="btn" style="margin-top: -7.5px; margin-left: 20px;" @onclick="BuscarClientes">
				<i class="bi bi-search fs-4"></i>
			</button>
		</div>

		<!-- Botón para crear cliente alineado a la derecha -->
		<div class="col-md-3 d-flex justify-content-end">
			<button class="btn btn-primary btn-crear" @onclick="CrearCliente">Crear cliente</button>
		</div>
	</div>
</div>

<!-- Contenedor de la tabla -->
<div class="table-container">
	<table class="table table-striped">
		<thead>
			<tr>
				<th class="text-start"></th>
				<th class="text-start" @onclick='() => OrdenarPor("dni")'>DNI</th>
				<th class="text-start">Nombre</th>
				<th class="text-start">Primer apellido</th>
				<th class="text-start">Segundo apellido</th>
				<th class="text-start">Tipo</th>
				<th class="text-start">Cuota máxima (€)</th>
				<th class="text-start" @onclick='() => OrdenarPor("fecha")'>Fecha de alta</th>
				<th class="text-start">Fecha de baja</th>
			</tr>
		</thead>
		<tbody>
			@if (clientes == null)
			{
				<tr>
					<td colspan="9"><em>Cargando clientes...</em></td>
				</tr>
			}
			else if (!clientes.Any())
			{
				<tr>
					<td colspan="9" class="text-center">No se han encontrado clientes con los criterios seleccionados.</td>
				</tr>
			}
			else
			{
				@foreach (var cliente in PaginaClientes())
				{
					<tr>
						<td class="d-flex ml-n2">
							<button @onclick="() => VerCliente(cliente.DNI)">
								<i class="bi bi-eye" style="color: dodgerblue"></i>
							</button>
							<button @onclick="() => EditarCliente(cliente.DNI)">
								<i class="bi bi-pencil" style="color: yellowgreen"></i>
							</button>
							<button>
								<i class="bi bi-person-x" style="color: red"></i>
							</button>
							@if (cliente.FechaBaja.HasValue)
							{
								<button @onclick="() => ReactivarCliente(cliente.DNI)">
									<i class="bi bi-arrow-bar-up"></i>
								</button>
							}
							else
							{
								<button @onclick="() => DarBaja(cliente.DNI)">
									<i class="bi bi-arrow-bar-down" style="color: red"></i>
								</button>
							}
						</td>
						<td class="text-start">@cliente.DNI</td>
						<td class="text-start">@cliente.Nombre</td>
						<td class="text-start">@cliente.Apellido1</td>
						<td class="text-start">@cliente.Apellido2</td>
						<td class="text-start">@cliente.Tipo</td>
						<td class="text-end" style="padding-right: 70px;">
							@(cliente.CuotaMaxima.HasValue ? $"{cliente.CuotaMaxima.Value:C2}" : "N/A")
						</td>
						<td class="text-start">@cliente.FechaAlta.ToString("yyyy/MM/dd HH:mm:ss")</td>
						<td class="text-start">
							@if (cliente.FechaBaja.HasValue)
							{
								<span style="color: red;">@cliente.FechaBaja.Value.ToString("yyyy/MM/dd HH:mm:ss")</span>
							}
							else
							{
								<span style="color: green;">Activo</span>
							}
						</td>
					</tr>
				}
			}
		</tbody>
	</table>
</div>

<!-- Paginación -->
<div class="d-flex justify-content-center mt-4">
	<button class="btn btn-secondary" @onclick="() => CambiarPagina(paginaActual - 1)" disabled="@(!PuedeIrAtras())">Anterior</button>
	<span class="mx-3 align-self-center">Página @paginaActual de @totalPaginas</span>
	<button class="btn btn-secondary" @onclick="() => CambiarPagina(paginaActual + 1)" disabled="@(!PuedeIrAdelante())">Siguiente</button>
</div>

@code {
	private List<Cliente> clientes;
	private List<Cliente> clientesFiltrados;
	private string terminoBusqueda = "";
	private DateTime? fechaInicio = null;
	private DateTime? fechaFin = null;
	// Por defecto se establece "activos"
	private string estadoSeleccionado = "activos";
	private string ordenPor = "dni"; // Orden por DNI por defecto
	private bool ordenAscendente = true; // Orden ascendente por defecto

	private int paginaActual = 1;
	private int totalPaginas = 1;
	private int tamanoPagina = 5;

	// Al cargar la página, se obtienen automáticamente los clientes activos
	protected override async Task OnInitializedAsync()
	{
		await BuscarClientes();
	}

	private async Task BuscarClientes()
	{
		try
		{
			var queryParams = new List<string>();

			if (!string.IsNullOrWhiteSpace(terminoBusqueda))
			{
				queryParams.Add($"termino={Uri.EscapeDataString(terminoBusqueda)}");
			}
			if (fechaInicio.HasValue)
			{
				queryParams.Add($"fechaInicio={fechaInicio.Value:yyyy-MM-dd}");
			}
			if (fechaFin.HasValue)
			{
				queryParams.Add($"fechaFin={fechaFin.Value:yyyy-MM-dd}");
			}
			// Se utiliza el estado seleccionado; por defecto "activos"
			queryParams.Add($"estado={estadoSeleccionado}");
			queryParams.Add($"orden={ordenPor.ToLower()}");

			var queryString = string.Join("&", queryParams);
			// Se usa el endpoint de búsqueda (ajusta la URL según tu API)
			var url = $"https://localhost:7123/api/clientes/buscar?{queryString}";

			var response = await Http.GetAsync(url);

			if (response.IsSuccessStatusCode)
			{
				clientes = await response.Content.ReadFromJsonAsync<List<Cliente>>();
				clientesFiltrados = clientes;
				totalPaginas = (int)Math.Ceiling((double)clientes.Count / tamanoPagina);
				paginaActual = 1; // Reinicia a la primera página
			}
			else
			{
				var error = await response.Content.ReadAsStringAsync();
				await Swal.FireAsync("Error", error, SweetAlertIcon.Error);
			}
		}
		catch (Exception ex)
		{
			await Swal.FireAsync("Error", $"Error al buscar los clientes: {ex.Message}", SweetAlertIcon.Error);
		}
	}

	private List<Cliente> PaginaClientes()
	{
		return clientesFiltrados
			.Skip((paginaActual - 1) * tamanoPagina)
			.Take(tamanoPagina)
			.ToList();
	}

	private void CambiarPagina(int nuevaPagina)
	{
		if (nuevaPagina >= 1 && nuevaPagina <= totalPaginas)
		{
			paginaActual = nuevaPagina;
		}
	}

	private bool PuedeIrAtras() => paginaActual > 1;
	private bool PuedeIrAdelante() => paginaActual < totalPaginas;

	private void OrdenarPor(string columna)
	{
		if (ordenPor == columna)
		{
			ordenAscendente = !ordenAscendente;
		}
		else
		{
			ordenPor = columna;
			ordenAscendente = true;
		}

		_ = BuscarClientes();
	}

	private void VerCliente(string dni)
	{
		Navegador.NavigateTo($"/ver-cliente/{dni}");
	}

	private void EditarCliente(string dni)
	{
		Navegador.NavigateTo($"/editar-cliente/{dni}");
	}

	private async Task DarBaja(string dni)
	{
		try
		{
			var respuesta = await Http.PutAsJsonAsync<object>($"https://localhost:7123/api/clientes/baja/{dni}", null);
			if (respuesta.IsSuccessStatusCode)
			{
				await Swal.FireAsync("Éxito", "Cliente dado de baja con éxito.", SweetAlertIcon.Success);
				await BuscarClientes();
			}
			else
			{
				var error = await respuesta.Content.ReadAsStringAsync();
				await Swal.FireAsync("Error", error, SweetAlertIcon.Error);
			}
		}
		catch (Exception ex)
		{
			await Swal.FireAsync("Error", $"Error al dar de baja al cliente: {ex.Message}", SweetAlertIcon.Error);
		}
	}

	private async Task ReactivarCliente(string dni)
	{
		try
		{
			var respuesta = await Http.PutAsJsonAsync<object>($"https://localhost:7123/api/clientes/reactivar/{dni}", null);
			if (respuesta.IsSuccessStatusCode)
			{
				await Swal.FireAsync("Éxito", "Cliente reactivado con éxito.", SweetAlertIcon.Success);
				await BuscarClientes();
			}
			else
			{
				var error = await respuesta.Content.ReadAsStringAsync();
				await Swal.FireAsync("Error", error, SweetAlertIcon.Error);
			}
		}
		catch (Exception ex)
		{
			await Swal.FireAsync("Error", $"Error al reactivar el cliente: {ex.Message}", SweetAlertIcon.Error);
		}
	}

	private void CrearCliente()
	{
		Navegador.NavigateTo("/crear-cliente");
	}
}