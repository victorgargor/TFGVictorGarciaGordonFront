@page "/clientes"
@using BlazorAppVictor.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject SweetAlertService Swal
@inject NavigationManager Navegador

<h3>Lista de Clientes</h3>

<style>
    table tbody tr td {
        vertical-align: middle !important;
    }
</style>

<button class="btn btn-primary mb-3" @onclick="CrearCliente">Nuevo Cliente</button>

@if (clientes == null)
{
    <p><em>Cargando clientes...</em></p>
}
else if (!clientes.Any())
{
    <p><em>No hay clientes registrados.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th class="text-start"></th>
                <th class="text-start">DNI</th>
                <th class="text-start">Nombre</th>
                <th class="text-start">Apellido 1</th>
                <th class="text-start">Apellido 2</th>
                <th class="text-start">Tipo</th>
                <th class="text-start">Cuota Máxima</th> <!-- Alineación a la derecha para esta columna -->
                <th class="text-start">Fecha de Alta</th>
                <th class="text-start">Fecha de Baja</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cliente in clientes)
            {
                <tr>
                    <td class="d-flex justify-content-start">
                        <button class="btn btn-info btn-sm ms-2" @onclick="() => VerCliente(cliente.DNI)">Ver</button>
                        <button class="btn btn-sm ms-2"><i class="bi bi-pencil fs-3"></i></button>
                        <button class="btn btn-sm ms-2"><i class="bi bi-person-x fs-3"></i></button>
                        @if (cliente.FechaBaja.HasValue)
                        {
                            <button class="btn btn-success btn-sm" @onclick="() => ReactivarCliente(cliente.DNI)">Reactivar</button>
                        }
                        else
                        {
                            <button class="btn btn-danger btn-sm" @onclick="() => DarBaja(cliente.DNI)">Dar Baja</button>
                        }
                    </td>
                    <td class="text-start">@cliente.DNI</td>
                    <td class="text-start">@cliente.Nombre</td>
                    <td class="text-start">@cliente.Apellido1</td>
                    <td class="text-start">@cliente.Apellido2</td>
                    <td class="text-start">@cliente.Tipo</td>
                    <td class="text-end" style="padding-right: 65px;">
                        @(cliente.CuotaMaxima.HasValue ? $"{cliente.CuotaMaxima.Value:C2}" : "N/A")
                    </td>
                    <td class="text-start">@cliente.FechaAlta.ToString("yyyy/MM/dd HH:mm:ss")</td> <!-- Fecha con HH:MM:SS -->
                    <td class="text-start">@(cliente.FechaBaja.HasValue ? cliente.FechaBaja.Value.ToString("yyyy/MM/dd HH:mm:ss") : "N/A")</td> <!-- Fecha con HH:MM:SS -->
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Cliente> clientes;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Traer los clientes desde la API
            clientes = await Http.GetFromJsonAsync<List<Cliente>>("https://localhost:7123/api/clientes");
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Error", $"Error al cargar los clientes: {ex.Message}", SweetAlertIcon.Error);
        }
    }

    // Métodos de acción para baja y reactivación
    private async Task DarBaja(string dni)
    {
        try
        {
            // Usamos `PostAsJsonAsync<object>` para indicar que el cuerpo de la solicitud es un objeto vacío.
            var respuesta = await Http.PostAsJsonAsync<object>($"https://localhost:7123/api/clientes/dar-baja/{dni}", null);
            if (respuesta.IsSuccessStatusCode)
            {
                await Swal.FireAsync("Éxito", "Cliente dado de baja con éxito.", SweetAlertIcon.Success);
                await OnInitializedAsync(); // Recargar lista
            }
            else
            {
                var error = await respuesta.Content.ReadAsStringAsync();
                await Swal.FireAsync("Error", error, SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Error", $"Error al dar de baja al cliente: {ex.Message}", SweetAlertIcon.Error);
        }
    }

    private async Task ReactivarCliente(string dni)
    {
        try
        {
            // Usamos `PostAsJsonAsync<object>` para indicar que el cuerpo de la solicitud es un objeto vacío.
            var respuesta = await Http.PostAsJsonAsync<object>($"https://localhost:7123/api/clientes/reactivar/{dni}", null);
            if (respuesta.IsSuccessStatusCode)
            {
                await Swal.FireAsync("Éxito", "Cliente reactivado con éxito.", SweetAlertIcon.Success);
                await OnInitializedAsync(); // Recargar lista
            }
            else
            {
                var error = await respuesta.Content.ReadAsStringAsync();
                await Swal.FireAsync("Error", error, SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Error", $"Error al reactivar el cliente: {ex.Message}", SweetAlertIcon.Error);
        }
    }

    // Redirigir a la página de ver cliente
    private void VerCliente(string dni)
    {
        Navegador.NavigateTo($"/ver-cliente/{dni}");
    }

    // Redirigir a la página de edición de cliente
    private void EditarCliente(string dni)
    {
        Navegador.NavigateTo($"/editar-cliente/{dni}");
    }

    // Redirigir a la página de crear cliente
    private void CrearCliente()
    {
        Navegador.NavigateTo("/crear-cliente");
    }
}