@page "/calculadora"
@using System.Text.Json
@inject HttpClient Http

<PageTitle>Calculadora</PageTitle>

<style>
	/* Estilos globales */
	body {
		font-family: 'Poppins', sans-serif;
		background-color: #f6f8fa;
		color: #24292f;
		margin: 0;
		padding: 20px;
		overflow: hidden;
	}

	/* Título */
	h1 {
		color: black;
		text-align: center;
		font-size: 2.5rem; /* Aumentamos el tamaño del h1 */
		font-weight: bold;
		margin-bottom: 30px; /* Añadimos separación entre el título y el formulario */
	}

	/* Estilo para el párrafo destacado */
	.highlighted-text {
		font-weight: 300;
		font-size: 1.1rem;
		color: #555;
		text-align: center;
		margin-bottom: 20px;
	}

	/* Contenedor principal */
	.container {
		max-width: 600px;
		margin: 0 auto;
		padding: 20px;
		border-radius: 12px;
		box-shadow: 0 0 10px rgba(27, 31, 35, 0.1); /* Sombra para destacarlo */
	}

	/* Estilo para los botones */
	.btn-operation {
		background-color: #0969da;
		color: white;
		font-size: 1.1rem;
		font-weight: bold;
		padding: 12px 20px;
		border: solid 1px black;
		border-radius: 6px;
		margin: 5px;
		cursor: pointer;
		transition: all 0.3s;
	}

		/* Efecto hover */
		.btn-operation:hover {
			background-color: #0550ae;
			color: white;
			transform: scale(1.1); /* Aumento de tamaño */
		}

	/* Asegura que los botones estén uno debajo del otro */
	.row {
		display: flex;
		justify-content: space-between;
		margin-top: 20px;
		flex-wrap: wrap; /* Por si no caben en una sola línea */
	}

	.mb-3 {
		margin-bottom: 15px; /* Añade espacio entre los botones */
	}
</style>

<h1>¡Calculadora!</h1>

<div class="container">
	<!-- Inputs -->
	<div class="row">
		<div class="col-12">
			<div class="form-group">
				<label for="num1">Número 1:</label>
				<input type="text" id="num1" class="form-control" @bind="num1" placeholder="Ingrese el primer número" />
			</div>
			<div class="form-group">
				<label for="num2">Número 2:</label>
				<input type="text" id="num2" class="form-control" @bind="num2" placeholder="Ingrese el segundo número" />
			</div>
			<div class="form-group">
				<label for="numDec">Número de Decimales:</label>
				<input type="number" id="numDec" class="form-control" @bind="numDec" placeholder="Cantidad de decimales" />
			</div>
		</div>
	</div>

	<!-- Botones -->
	<div class="row mt-3">
		<div class="col-12 text-center">
			<button class="btn btn-operation" @onclick='() => RealizarOperacion("suma")'>Suma</button>
			<button class="btn btn-operation" @onclick='() => RealizarOperacion("resta")'>Resta</button>
			<button class="btn btn-operation" @onclick='() => RealizarOperacion("multiplicacion")'>Multiplicación</button>
			<button class="btn btn-operation" @onclick='() => RealizarOperacion("division")'>División</button>
			<button class="btn btn-operation" @onclick='() => RealizarOperacion("modulo")'>Módulo</button>
			<button class="btn btn-operation" @onclick='() => RealizarOperacion("comparacion")'>Comparar</button>
		</div>
	</div>

	<!-- Salidas -->
	<div class="row mt-3">
		<div class="col-12 text-center">
			<!-- Muestra el resultado si no es nulo o vacío -->
			@if (!string.IsNullOrEmpty(resultado))
			{
				<div class="result-box">
					<h4>Resultado: <span class="result-text">@resultado</span></h4>
				</div>
			}
			<!-- Muestra un mensaje de error si hay -->
			@if (!string.IsNullOrEmpty(error))
			{
				<div class="alert alert-danger error-box">
					<i class="bi bi-x-circle"></i> <strong>¡Error!</strong> @error
				</div>
			}
		</div>
	</div>
</div>

@code {
	// Por defecto los valores son 0 para los números y 2 para los decimales
	private string num1 = "0";
	private string num2 = "0";
	private int numDec = 2;
	private string? resultado; // Variable para almacenar los resultados
	private string? error; // Variable para almacenar los errores

	/// <summary>
	/// Método encargado de realizar la operación seleccionada por el usuario.
	/// Valida la entrada, evita la división por cero y construye la URL para hacer la petición a la API.
	/// </summary>
	/// <param name="operacion">El tipo de operación que se va a realizar (suma, resta, multiplicación, etc.)</param>
	/// <returns>Una tarea asíncrona para realizar la operación.</returns>
	private async Task RealizarOperacion(string operacion)
	{
		// Limpiar cualquier resultado o error anterior
		resultado = error = null;

		// Valido la entrada
		if (!ValidarEntradas(out double n1, out double n2))
			return;

		// Comprobar que no se intente dividir por cero
		if ((operacion == "division" || operacion == "modulo") && n2 == 0)
		{
			error = "No se puede dividir por 0.";
			return;
		}

		// Construyo la URL para la API dependiendo de la operación
		string url = operacion == "comparacion"
			? $"https://localhost:7123/api/calculadora/comparacion/{num1}/{num2}" // URL para comparación
			: $"https://localhost:7123/api/calculadora/{operacion}/{num1}/{num2}/{numDec}"; // URL para operaciones matemáticas

		// Obtengo el resultado
		await ObtenerResultado(url);
	}

	/// <summary>
	/// Valida la entrada de los números, asegurando que sean válidos y que estén en el formato correcto.
	/// </summary>
	/// <param name="n1">El primer número a validar.</param>
	/// <param name="n2">El segundo número a validar.</param>
	/// <returns>Devuelve true si las entradas son válidas, false en caso contrario.</returns>
	private bool ValidarEntradas(out double n1, out double n2)
	{
		n1 = n2 = 0;

		// Comprobar que los números no estén vacíos
		if (string.IsNullOrWhiteSpace(num1) || string.IsNullOrWhiteSpace(num2))
		{
			error = "Ingrese ambos números."; // Si falta algún número
			return false;
		}

		// Solo permito el punto (.) como separador decimal
		if (num1.Contains(',') || num2.Contains(','))
		{
			error = "Use punto (.) como separador decimal.";
			return false;
		}

		// Si los datos proporcionados no son números válidos
		if (!double.TryParse(num1, out n1) || !double.TryParse(num2, out n2))
		{
			error = "Valores inválidos, ingrese solo números.";
			return false;
		}

		return true; // Si todo es correcto, se devuelve true
	}

	/// <summary>
	/// Realiza una petición a la API para obtener el resultado de la operación.
	/// </summary>
	/// <param name="url">La URL de la API para la operación deseada.</param>
	/// <returns>Una tarea asíncrona que obtiene el resultado.</returns>
	private async Task ObtenerResultado(string url)
	{
		try
		{
			// Hacer la solicitud GET a la API
			var respuesta = await Http.GetFromJsonAsync<JsonElement>(url);

			// Obtener el resultado de la respuesta JSON
			resultado = respuesta.TryGetProperty("resultado", out var resJson) ? resJson.ToString() : "Error en la operación.";
		}
		catch (Exception ex)
		{
			// Si hay un error, se captura y se muestra el mensaje de error
			error = $"Error: {ex.Message}";
		}
	}
}
