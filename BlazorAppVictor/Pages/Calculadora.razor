@page "/calculadora"
@using System.Globalization
@using System.Text.Json
@inject HttpClient Http
@inject SweetAlertService Swal

<PageTitle>Calculadora</PageTitle>

<style>
	/* Estilos generales */
	* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
	font-family: sans-serif;
	}

	body {
	min-height: 100vh;
	background-color: #f6f8fa;
	margin: 0;
	padding: 20px;
	overflow: hidden;
	}

	/* Título */
	h1 {
	color: black;
	text-align: center;
	font-size: 3rem;
	font-weight: bold;
	margin-bottom: 20px;
	}

	/* Contenedor para centrar la calculadora y el selector de decimales */
	.container {
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	}

	/* Contenedor del selector de decimales */
	.decimales-container {
	margin-bottom: 1rem;
	text-align: center;
	}

	/* Estilo para el input del número de decimales */
	input[type="number"]#numDecimales {
	width: 60px;
	padding: 0.3rem;
	margin-left: 5px;
	border: 1px solid #ccc;
	border-radius: 4px;
	font-size: 1rem;
	text-align: center;
	color: #333;
	background-color: #fff;
	}

	/* Estilos de la calculadora */
	.calculadora {
	background-color: #48bfff;
	color: white;
	width: 350px;
	max-width: 100%;
	padding: 1.5rem;
	border-radius: 1.5rem;
	display: grid;
	grid-template-columns: repeat(4, 1fr);
	gap: 0.5rem;
	box-shadow: 0 0 20px #48bfff;
	}

	/* Pantalla donde se muestra el valor actual */
	.pantalla {
	grid-column: 1 / 5;
	background-color: #090c31;
	padding: 1.5rem;
	text-align: right;
	border-radius: 0.5rem;
	margin-bottom: 1.5rem;
	font-family: monospace;
	font-weight: bold;
	font-size: 2rem;
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
	}

	.btn {
	background-color: #006da7;
	color: white;
	border: 0;
	padding: 1.5rem 0.5rem;
	display: flex;
	justify-content: center;
	align-items: center;
	border-radius: 0.5rem;
	cursor: pointer;
	}

	.btn:hover {
	background-color: #004f78;
	}

	#cero {
	grid-column: span 2;
	}

	#igual {
	grid-row: span 2;
	background-color: #e65766;
	}

	#igual:hover {
	background-color: #e6394a;
	}
</style>

<h1>¡Calculadora!</h1>

<!-- Selector para el número de decimales -->
<div class="decimales-container">
	<label for="numDecimales">Número de decimales:</label>
	<input type="number" id="numDecimales" @bind="NumeroDecimales" />
</div>

<div class="container">
	<div class="calculadora">
		<!-- Pantalla de la calculadora -->
		<div class="pantalla" style='@ObtenerEstiloPantalla()'>@pantallaActual</div>
		<!-- Botón para reiniciar -->
		<button class="btn" @onclick='() => ManejarClickBoton("C")'>C</button>
		<!-- Botón para la operación de módulo -->
		<button class="btn" @onclick='() => ManejarClickBoton("%")'>%</button>
		<button class="btn" @onclick='() => ManejarClickBoton("/")'>/</button>
		<button class="btn" @onclick='() => ManejarClickBoton("*")'>*</button>
		<button class="btn" @onclick='() => ManejarClickBoton("7")'>7</button>
		<button class="btn" @onclick='() => ManejarClickBoton("8")'>8</button>
		<button class="btn" @onclick='() => ManejarClickBoton("9")'>9</button>
		<button class="btn" @onclick='() => ManejarClickBoton("-")'>-</button>
		<button class="btn" @onclick='() => ManejarClickBoton("4")'>4</button>
		<button class="btn" @onclick='() => ManejarClickBoton("5")'>5</button>
		<button class="btn" @onclick='() => ManejarClickBoton("6")'>6</button>
		<button class="btn" @onclick='() => ManejarClickBoton("+")'>+</button>
		<button class="btn" @onclick='() => ManejarClickBoton("1")'>1</button>
		<button class="btn" @onclick='() => ManejarClickBoton("2")'>2</button>
		<button class="btn" @onclick='() => ManejarClickBoton("3")'>3</button>
		<button class="btn" id="igual" @onclick='() => ManejarClickBoton("=")'>=</button>
		<button class="btn" id="cero" @onclick='() => ManejarClickBoton("0")'>0</button>
		<button class="btn" @onclick='() => ManejarClickBoton(".")'>.</button>
	</div>
</div>

@code {
	/// <summary>
	/// Valor que se muestra actualmente en la pantalla de la calculadora.
	/// </summary>
	private string pantallaActual = "0";

	/// <summary>
	/// Almacena el primer operando ingresado.
	/// </summary>
	private string? primerOperando;

	/// <summary>
	/// Almacena el operador seleccionado.
	/// </summary>
	private string? operadorActual;

	/// <summary>
	/// Indica si se debe limpiar la pantalla para una nueva entrada.
	/// </summary>
	private bool nuevaEntrada = false;

	private int _numeroDecimales = 2;
	/// <summary>
	/// Número de decimales para redondear el resultado.
	/// Se ajusta automáticamente: si es negativo se fija en 0 y si es mayor a 8 se fija en 8.
	/// </summary>
	private int NumeroDecimales
	{
		get => _numeroDecimales;
		set
		{
			if (value < 0)
			{
				_numeroDecimales = 0;
			}
			else if (value > 8)
			{
				_numeroDecimales = 8;
			}
			else
			{
				_numeroDecimales = value;
			}
		}
	}

	/// <summary>
	/// Devuelve un estilo en línea para la pantalla, ajustando el tamaño de fuente según la longitud del texto.
	/// Así se evita que un número muy grande se desborde.
	/// </summary>
	/// <returns>Una cadena de estilo CSS.</returns>
	private string ObtenerEstiloPantalla()
	{
		int longitud = pantallaActual.Length;
		string fontSize = "2rem"; // tamaño base

		if (longitud <= 10)
			fontSize = "2rem";
		else if (longitud <= 15)
			fontSize = "1.8rem";
		else if (longitud <= 20)
			fontSize = "1.6rem";
		else if (longitud <= 25)
			fontSize = "1.4rem";
		else
			fontSize = "1.2rem";

		// Se incluyen propiedades para evitar desbordamiento
		return $"font-size: {fontSize}; overflow: hidden; white-space: nowrap; text-overflow: ellipsis;";
	}

	/// <summary>
	/// Maneja el clic en cada botón de la calculadora.
	/// Según el botón presionado, actualiza la pantalla, almacena el operando u operador o ejecuta la operación.
	/// </summary>
	/// <param name="valor">Valor del botón presionado.</param>
	private async Task ManejarClickBoton(string valor)
	{
		// Se podría limpiar un mensaje de error previo si lo estuvieses mostrando, pero ahora se usan alertas.
		if (valor == "C")
		{
			// Reiniciar la calculadora
			pantallaActual = "0";
			primerOperando = null;
			operadorActual = null;
			nuevaEntrada = false;
		}
		else if (valor == "=")
		{
			// Ejecutar la operación a través de la API
			await EjecutarOperacion();
		}
		// Si se presiona un operador (incluyendo '%')
		else if (valor == "+" || valor == "-" || valor == "*" || valor == "/" || valor == "%")
		{
			primerOperando = pantallaActual;
			if (pantallaActual == ".")
			{
				await Swal.FireAsync("Error", "No se puede operar con el (.)", SweetAlertIcon.Error);
				return;
			}
			else
			{
				operadorActual = valor;
			}			
			nuevaEntrada = true;
		}
		else
		{
			// Se ingresó un dígito o el punto decimal
			if (nuevaEntrada)
			{
				pantallaActual = "";
				nuevaEntrada = false;
			}

			// Evitar más de un punto decimal
			if (valor == "." && pantallaActual.Contains("."))
			{
				return;
			}

			// Si la pantalla muestra "0", se reemplaza salvo que se ingrese un punto
			if (pantallaActual == "0" && valor != ".")
			{
				pantallaActual = valor;
			}
			else
			{
				pantallaActual += valor;
			}
		}
	}

	/// <summary>
	/// Ejecuta la operación seleccionada llamando a la API.
	/// Valida que no se intente dividir o calcular módulo por cero, mapea el operador al endpoint correspondiente
	/// y actualiza la pantalla con el resultado formateado con separador de miles y el número de decimales indicado.
	/// </summary>
	private async Task EjecutarOperacion()
	{
		if (primerOperando != null && operadorActual != null)
		{
			// Validar que no se intente dividir o calcular módulo por cero
			if ((operadorActual == "/" || operadorActual == "%") && pantallaActual == "0")
			{
				await Swal.FireAsync("Error", "No se puede dividir por 0.", SweetAlertIcon.Error);
				return;
			}

			// Mapear el operador al endpoint de la API
			string operacion = operadorActual switch
			{
				"+" => "suma",
				"-" => "resta",
				"*" => "multiplicacion",
				"/" => "division",
				"%" => "modulo",
				_ => ""
			};

			if (string.IsNullOrEmpty(operacion))
			{
				await Swal.FireAsync("Error", "Operador no soportado.", SweetAlertIcon.Error);
				return;
			}

			// Construir la URL para llamar a la API
			string url = $"https://localhost:7123/api/calculadora/{operacion}/{primerOperando}/{pantallaActual}/{NumeroDecimales}";

			try
			{
				// Solicitar la operación a la API y obtener la respuesta
				var respuesta = await Http.GetFromJsonAsync<JsonElement>(url);
				if (respuesta.TryGetProperty("resultado", out var resultadoJson))
				{
					// Intentar convertir el resultado a número y formatearlo con separador de miles
					if (double.TryParse(resultadoJson.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture, out double valor))
					{
						if (Math.Abs(valor) >= 1e10 || (Math.Abs(valor) > 0 && Math.Abs(valor) < 1e-6))
						{
							pantallaActual = valor.ToString("E", CultureInfo.InvariantCulture);
						}
						else
						{
							pantallaActual = valor.ToString($"N{NumeroDecimales}", CultureInfo.InvariantCulture);
						}
					}
					else
					{
						pantallaActual = resultadoJson.ToString();
					}
				}
				else
				{
					await Swal.FireAsync("Error", "Error en la operación.", SweetAlertIcon.Error);
				}
			}
			catch (Exception ex)
			{
				await Swal.FireAsync("Error", $"{ex.Message}", SweetAlertIcon.Error);
			}

			// Reiniciar los valores para la siguiente operación
			primerOperando = null;
			operadorActual = null;
			nuevaEntrada = true;
		}
	}
}
