@page "/formas"
@using System.Text.Json
@using System.Net.Http.Json
@inject HttpClient Http
@inject SweetAlertService Swal

<PageTitle>Formas</PageTitle>

<style>
	/* Estilos globales */
	body {
		font-family: 'Poppins', sans-serif;
		background-color: #f6f8fa;
		color: #24292f;
		margin: 0;
		padding: 20px;
		min-height: 100vh;
		display: flex;
		flex-direction: column;
		justify-content: center;
		overflow: hidden;
	}
	/* Título */
	h3 {
		color: black;
		text-align: center;
		font-size: 3rem;
		font-weight: bold;
		margin-top: 30px;
		margin-bottom: 30px;
		grid-column: 1 / -1;
	}
	/* Contenedor principal */
	.container {
		width: 800px;
		height: auto;
		margin: auto;
		padding: 20px;
		margin-top: 50px;
		border-radius: 12px;
		box-shadow: 0 0 10px rgba(27, 31, 35, 0.1);
	}
	/* Contenedor para los botones */
	.row {
		display: flex;
		justify-content: center;
		flex-wrap: wrap;
		gap: 10px;
	}
	/* Botones */
	.btn-operation {
		width: 20%;
		background-color: #0969da;
		color: white;
		font-size: 1.1rem;
		font-weight: bold;
		padding: 12px 20px;
		border: solid 1px black;
		border-radius: 6px;
		margin: 5px;
		margin-bottom: 15px;
		cursor: pointer;
		transition: all 0.3s;
	}

		.btn-operation:hover {
			background-color: #0550ae;
			color: white;
			transform: scale(1.1);
		}
	/* Estilos para los grupos de formulario */
	.form-group {
		margin-top: 10px;
		margin-bottom: 15px;
		text-align: center;
	}

		.form-group label {
			display: block;
			margin-bottom: 5px;
			font-weight: bold;
		}

	input[type="number"] {
		width: 50%;
		padding: 12px;
		font-size: 1rem;
		border-radius: 12px;
		border: 1px solid #ccc;
		box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
	}

	input[type=number]:focus {
		border-color: #66afe9;
		outline: none;
		box-shadow: 0 0 8px rgba(102, 175, 233, 0.6);
	}
	/* Estilo para el resultado */
	.resultado {
		white-space: pre-wrap;
		background-color: #ffffff;
		padding: 15px;
		border-radius: 8px;
		border: 1px solid #ccc;
		margin-top: 15px;
		font-size: 1rem;
		height: 225px;
		overflow-y: auto;
		font-family: 'Courier New', Courier, monospace;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
	}
</style>

<h3>Generar Formas</h3>

<!-- Contenedor principal -->
<div class="container">
	<!-- Inputs -->
	<div class="form-group">
		<label for="inputCirculos">Círculos</label>
		<input id="inputCirculos" type="number" placeholder="Cantidad de Círculos" @bind="cantidadCirculos" min="0" />
	</div>

	<div class="form-group">
		<label for="inputCuadrados">Cuadrados</label>
		<input id="inputCuadrados" type="number" placeholder="Cantidad de Cuadrados" @bind="cantidadCuadrados" min="0" />
	</div>

	<div class="form-group">
		<label for="inputTriangulos">Triángulos</label>
		<input id="inputTriangulos" type="number" placeholder="Cantidad de Triángulos" @bind="cantidadTriangulos" min="0" />
	</div>

	<!-- Botones -->
	<div class="row">
		<button class="btn-operation" @onclick="GenerarFormas">Generar</button>
	</div>

	<!-- Salida -->
	<div class="resultado">
		<pre>@resultadoHTML</pre>
	</div>
</div>

@code {
	// Cantidad de Círculos ingresada
	private int cantidadCirculos;

	// Cantidad de Cuadrados ingresada
	private int cantidadCuadrados;

	// Cantidad de Triángulos ingresada
	private int cantidadTriangulos;

	// Resultado bruto de la API
	private string resultado = "";
	// Resultado procesado 
	private string resultadoHTML = "";

	/// <summary>
	/// Envía la solicitud a la API, procesa la respuesta y genera un reporte legible.
	/// </summary>
	private async Task GenerarFormas()
	{
		// Limpio todo
		resultado = "";
		resultadoHTML = "";

		// Valido la entrada
		if (cantidadCirculos < 0 || cantidadCuadrados < 0 || cantidadTriangulos < 0)
		{
			await Swal.FireAsync("Error", "Las cantidades no pueden ser negativas.", SweetAlertIcon.Error);
			return;
		}

		if (cantidadCirculos == 0 && cantidadCuadrados == 0 && cantidadTriangulos == 0)
		{
			await Swal.FireAsync("Error", "Debe ingresar al menos una forma para generar.", SweetAlertIcon.Error);
			return;
		}

		try
		{
			// Creo el objeto para hacer la solicitud
			var solicitudFormas = new
			{
				Circulos = cantidadCirculos,
				Cuadrados = cantidadCuadrados,
				Triangulos = cantidadTriangulos
			};

			// Envio la solicitud a la API
			var respuesta = await Http.PostAsJsonAsync("https://localhost:7123/api/formas", solicitudFormas);

			if (respuesta.IsSuccessStatusCode)
			{
				// Leeo la respuesta
				resultado = await respuesta.Content.ReadAsStringAsync();

				// Proceso el JSON y construir la respuesta legible
				using var doc = JsonDocument.Parse(resultado);
				var root = doc.RootElement;
				var sb = new System.Text.StringBuilder();

				// Mostrar todas las formas
				sb.AppendLine("=== Información de Todas las Formas ===");
				sb.AppendLine();

				if (root.TryGetProperty("todasLasFormas", out JsonElement todasLasFormas))
				{
					foreach (var forma in todasLasFormas.EnumerateArray())
					{
						var tipo = forma.GetProperty("tipo").GetString();
						var color = forma.GetProperty("color").GetString();
						var centro = forma.GetProperty("centro");
						var x = centro.GetProperty("x").GetInt32();
						var y = centro.GetProperty("y").GetInt32();
						var area = forma.GetProperty("area").ToString();
						var propiedades = forma.GetProperty("propiedades").GetString();

						sb.AppendLine($"Tipo: {tipo}");
						sb.AppendLine($"Color: {color}");
						sb.AppendLine($"Centro: ({x}, {y})");
						sb.AppendLine($"Área: {area}");
						sb.AppendLine($"Propiedades: {propiedades}");
						sb.AppendLine(new string('-', 40));
					}
				}

				// Mostras las formas agrupadas
				if (root.TryGetProperty("agrupadas", out JsonElement agrupadas))
				{
					sb.AppendLine();
					sb.AppendLine("=== Formas Agrupadas ===");
					sb.AppendLine();

					// Círculos agrupados
					if (agrupadas.TryGetProperty("circulos", out JsonElement circulos))
					{
						sb.AppendLine("Círculos:");
						foreach (var circulo in circulos.EnumerateArray())
						{
							// Suponiendo que cada círculo tenga 'radio', 'color', 'centro' y 'area'
							var radio = circulo.TryGetProperty("radio", out JsonElement radioElem) ? radioElem.ToString() : "N/A";
							var colorCirculo = circulo.GetProperty("color").GetString();
							var centroCirculo = circulo.GetProperty("centro");
							var xC = centroCirculo.GetProperty("x").GetInt32();
							var yC = centroCirculo.GetProperty("y").GetInt32();
							var areaCirculo = circulo.GetProperty("area").ToString();

							sb.AppendLine($"  Radio: {radio}, Color: {colorCirculo}, Centro: ({xC}, {yC}), Área: {areaCirculo}");
						}
						sb.AppendLine(new string('-', 40));
					}

					// Cuadrados agrupados
					if (agrupadas.TryGetProperty("cuadrados", out JsonElement cuadrados))
					{
						sb.AppendLine("Cuadrados:");
						foreach (var cuadrado in cuadrados.EnumerateArray())
						{
							var lado = cuadrado.GetProperty("lado").ToString();
							var colorCuadrado = cuadrado.GetProperty("color").GetString();
							var centroCuadrado = cuadrado.GetProperty("centro");
							var xC = centroCuadrado.GetProperty("x").GetInt32();
							var yC = centroCuadrado.GetProperty("y").GetInt32();
							var areaCuadrado = cuadrado.GetProperty("area").ToString();

							sb.AppendLine($"  Lado: {lado}, Color: {colorCuadrado}, Centro: ({xC}, {yC}), Área: {areaCuadrado}");
						}
						sb.AppendLine(new string('-', 40));
					}

					// Triángulos agrupados (incluyendo desplazamiento y todos los ángulos)
					if (agrupadas.TryGetProperty("triangulos", out JsonElement triangulos))
					{
						sb.AppendLine("Triángulos:");
						foreach (var triangulo in triangulos.EnumerateArray())
						{
							var baseTri = triangulo.GetProperty("base").ToString();
							var altura = triangulo.GetProperty("altura").ToString();
							var colorTri = triangulo.GetProperty("color").GetString();
							var centroTri = triangulo.GetProperty("centro");
							var xT = centroTri.GetProperty("x").GetInt32();
							var yT = centroTri.GetProperty("y").GetInt32();
							var areaTri = triangulo.GetProperty("area").ToString();

							// Extraer desplazamiento y todos los ángulos desde la cadena 'propiedades'
							string desplazamiento = "N/A";
							string angulos = "N/A";
							if (triangulo.TryGetProperty("propiedades", out JsonElement propElem))
							{
								string propStr = propElem.GetString();
								// Desplazamiento
								int idxDes = propStr.IndexOf("Desplazamiento:");
								if (idxDes >= 0)
								{
									int start = idxDes + "Desplazamiento:".Length;
									int end = propStr.IndexOf(",", start);
									if (end < 0) end = propStr.Length;
									desplazamiento = propStr.Substring(start, end - start).Trim();
								}
								// Extraer todos los ángulos hasta ", Color:"
								int idxAng = propStr.IndexOf("Ángulos:");
								if (idxAng >= 0)
								{
									int start = idxAng + "Ángulos:".Length;
									int end = propStr.IndexOf(", Color:", start);
									if (end < 0) end = propStr.Length;
									angulos = propStr.Substring(start, end - start).Trim();
								}
							}

							sb.AppendLine($"  Base: {baseTri}, Altura: {altura}, Color: {colorTri}");
							sb.AppendLine($"  Centro: ({xT}, {yT}), Área: {areaTri}");
							sb.AppendLine($"  Desplazamiento: {desplazamiento}, Ángulos: {angulos}");
							sb.AppendLine(new string('-', 40));
						}
					}
				}

				// Asignar el reporte final a la variable de salida
				resultadoHTML = sb.ToString();
			}
			else
			{
				await Swal.FireAsync("Error", respuesta.ReasonPhrase, SweetAlertIcon.Error);
			}
		}
		catch (Exception ex)
		{
			await Swal.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
		}
	}
}


