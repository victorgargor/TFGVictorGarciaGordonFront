@page "/itemseparator"
@using System.Text.Json
@inject HttpClient Http
@inject SweetAlertService Swal

<PageTitle>ItemSeparator</PageTitle>

<style>
	/* Estilos globales */
	body {
		font-family: 'Poppins', sans-serif;
		background-color: #f6f8fa;
		color: #24292f;
		margin: 0;
		padding: 20px;
		min-height: 100vh;
		display: flex;
		flex-direction: column;
		justify-content: center;
		overflow: hidden;
	}

	/* Contenedor principal */
	.container {
		width: 100%;
		margin: auto;
		padding: 20px;
		margin-top: 100px;
		border-radius: 12px;
		box-shadow: 0 0 10px rgba(27, 31, 35, 0.1);
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 20px;
		align-items: start;
	}

	/* Título */
	h3 {
		color: black;
		text-align: center;
		font-size: 3rem;
		font-weight: bold;
		margin-top: 30px;
		margin-bottom: 30px;
		grid-column: 1 / -1;
	}

	/* Inputs y Salida */
	.input-section {
		display: flex;
		flex-direction: column;
		gap: 20px;
	}

	.output-section {
		display: flex;
		flex-direction: column;
		gap: 20px;
	}

	/* Form */
	.form-group {
		display: flex;
		flex-direction: column;
	}

	label {
		font-size: 1.2rem;
		margin-bottom: 5px;
	}

	/* Textarea (entrada y resultado) */
	textarea {
		width: 100%;
		min-height: 150px;
		padding: 16px;
		font-size: 1rem;
		line-height: 1.5;
		color: #333;
		background-color: #fff;
		border: 1px solid #ccc;
		border-radius: 8px;
		box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
		resize: none;
	}

		textarea:focus {
			border-color: #66afe9;
			outline: none;
			box-shadow: 0 0 8px rgba(102, 175, 233, 0.6);
		}

	/* Botones */
	.btn-operation {
		width: 200px;
		background-color: #0969da;
		color: white;
		font-size: 1rem;
		font-weight: bold;
		padding: 10px 20px;
		border: solid 1px black;
		border-radius: 6px;
		cursor: pointer;
		transition: all 0.3s;
		text-align: center;
	}

		.btn-operation:hover {
			background-color: #0550ae;
			transform: scale(1.1);
		}
</style>

<h3>ItemSeparator</h3>

<div class="container">
	<!-- Inputs -->
	<div class="input-section">
		<div class="form-group">
			<label for="inputItemText">Cadena de entrada:</label>
			<textarea id="inputItemText" @bind="inputText" placeholder="(ej: NombreItem$$##Precio$$##Cantidad)"></textarea>
		</div>

		<button class="btn-operation" @onclick="ProcesarCadena">Procesar cadena</button>
	</div>

	<!-- Salida -->
	<div class="output-section">
		<div class="form-group">
			<label for="resultText">Resultado:</label>
			<textarea id="resultText" readonly>@resultado</textarea>
		</div>
	</div>
</div>

@code {
	// Texto que escribe el usuario con el valor por defecto
	private string inputText = "Bread$$##12.5$$##10";

	// Variable para mostrar el resultado
	private string resultado = "";

	// Separador para nuestra clase (constante para que dependiendo del separador se personalice el mensaje)
	private const string SEPARADOR = "$$##";

	/// <summary>
	/// Procesa la cadena proporcionada por el usuario.
	/// </summary>
	private async Task ProcesarCadena()
	{
		try
		{
			// Valido la cadena de entrada
			if (string.IsNullOrWhiteSpace(inputText))
			{
				await Swal.FireAsync("Error", "Por favor, ingresa una cadena válida.", SweetAlertIcon.Error);
				resultado = "";
				return;
			}

			// Verifico que la cadena esté en el formato correcto
			var partes = inputText.Split(SEPARADOR);
			if (partes.Length != 3)
			{
				await Swal.FireAsync("Error", $"Formato inválido. La cadena debe ser 'NombreItem{SEPARADOR}Precio{SEPARADOR}Cantidad'.", SweetAlertIcon.Error);
				resultado = "";
				return;
			}

			// Valido que el nombre no esté vacío
			if (string.IsNullOrWhiteSpace(partes[0].Trim()))
			{
				await Swal.FireAsync("Error", "El nombre del ítem no puede estar vacío.", SweetAlertIcon.Error);
				resultado = "";
				return;
			}

			// Valido que se use (.) en vez de (,)
			if (partes[1].Trim().Contains(","))
			{
				await Swal.FireAsync("Error", "Se debe usar punto (.) como separador decimal.", SweetAlertIcon.Error);
				resultado = "";
				return;
			}

			// Valido que el precio sea un número y que sea positivo
			if (!double.TryParse(partes[1].Trim(), out var precio) || precio < 0)
			{
				await Swal.FireAsync("Error", $"El precio {partes[1].Trim()} debe ser un número positivo.", SweetAlertIcon.Error);
				resultado = "";
				return;
			}

			// Valido la cantidad
			if (!int.TryParse(partes[2].Trim(), out var cantidad) || cantidad < 0)
			{
				await Swal.FireAsync("Error", $"La cantidad {partes[2].Trim()} debe ser un número entero positivo mayor que 0 y de 9 dígitos máximo.", SweetAlertIcon.Error);
				resultado = "";
				return;
			}

			// Para validar el número de dígitos de la cantidad
			string cantidadStr = cantidad.ToString();

			if (cantidadStr.Length >= 10)
			{
				await Swal.FireAsync("Error", $"El valor de la cantidad {partes[2].Trim()} es demasiado largo (9 dígitos máximo).", SweetAlertIcon.Error);
				resultado = "";
				return;
			}


			// Llamo al método que hace la petición a la API
			var request = new { CadenaEntrada = inputText };
			await RealizarOperacionApi("https://localhost:7123/api/itemseparator", request);
		}
		catch (Exception ex)
		{
			// Manejo de excepciones y limpio el resultado
			await Swal.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
			resultado = "";
		}
	}

	/// <summary>
	/// Este método realiza una solicitud a la API con los datos proporcionados y procesa la respuesta.
	/// </summary>
	/// <param name="url">La URL a la cual se enviará la solicitud POST.</param>
	/// <param name="requestData">El objeto que contiene los datos que se enviarán a la API.</param>
	/// <returns>Un Task que representa la operación asíncrona de realizar la solicitud.</returns>
	private async Task RealizarOperacionApi(string url, object requestData)
	{
		try
		{
			// Envio la solicitud a la API con los datos proporcionados.
			var response = await Http.PostAsJsonAsync(url, requestData);

			// Si se produce un error muestro un mensaje y paro el proceso.
			if (!response.IsSuccessStatusCode)
			{
				await Swal.FireAsync("Error", "Error al procesar la solicitud. Inténtelo de nuevo.", SweetAlertIcon.Error);
				return;
			}

			// Si no hay errores, leo el contenido de la respuesta como un objeto JSON.
			var respuestaJson = await response.Content.ReadFromJsonAsync<JsonElement>();

			// Compruebo que la respuesta tiene las propiedades: itemName, itemPrice y itemQuantity.
			if (respuestaJson.TryGetProperty("itemName", out var itemName) &&
				respuestaJson.TryGetProperty("itemPrice", out var itemPrice) &&
				respuestaJson.TryGetProperty("itemQuantity", out var itemQuantity))
			{
				// Si las propiedades están se muestran.
				resultado = $"Nombre: {itemName}\nPrecio: {itemPrice}\nCantidad: {itemQuantity}";
			}
			else
			{
				// Si no se encuentran las propiedades, mostrar un mensaje de error y limpio el resultado.
				await Swal.FireAsync("Error", "No se pudieron procesar los datos correctamente.", SweetAlertIcon.Error);
				resultado = "";
			}
		}
		catch (Exception ex)
		{
			// Manejo de excepciones y limpio el resultado
			await Swal.FireAsync("Error", ex.StackTrace, SweetAlertIcon.Error);
			resultado = "";
		}
	}
}
