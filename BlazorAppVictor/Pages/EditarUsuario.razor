@page "/usuarios/editar/{UsuarioId}"
@attribute [Authorize(Roles = "superadmin")]
@using BlazorAppVictor.DTOs
@using System.Text
@using System.Text.Json
@inject HttpClient Http
@inject SweetAlertService Swal

<style>
	h3 {
		text-align: center;
		font-size: 40px;
		font-weight: bold;
		color: #333;
		margin-top: 50px;
		margin-bottom: 75px;
	}

	.table {
		width: 100%;
		margin-top: 20px;
		border-collapse: collapse;
		background: #fff;
		border-radius: 12px;
		box-shadow: 0 8px 24px rgba(0, 0, 0, 0.05);
	}

		.table th,
		.table td {
			border-bottom: 1px solid #e5e5e5;
		}

		.table th {
			background-color: #f4f6f9;
			padding: 1rem;
			text-align: left;
		}

		.table td {
			vertical-align: middle;
			font-size: 1rem;
			line-height: 1.5;
			padding: 1rem;
		}

			.table td.icon-cell {
				padding: 0.25rem 0.5rem;
				text-align: center;
				vertical-align: middle;
				width: 50px;
			}

				.table td.icon-cell .btn {
					padding: 0.25rem;
					height: auto;
				}

			.table td:not(.icon-cell) {
				display: flex;
				align-items: center;
				height: 57.7px;
			}

	.table-responsive-wrapper {
		overflow-x: auto;
	}

	.btn {
		padding: 0.5rem 1rem;
		margin-left: 10px;
		transition: background 0.3s, transform 0.1s;
		display: flex;
		align-items: center;
		gap: 0.4rem;
	}

	.btn-info {
		background-color: #17a2b8;
		color: white;
	}

	.btn-danger {
		background-color: #dc3545;
		color: white;
	}

	.btn-info:hover {
		background-color: #138496;
	}

	.btn-danger:hover {
		background-color: #c82333;
	}

	.form-inline {
		margin-bottom: 20px;
		display: flex;
		gap: 10px;
		align-items: center;
		flex-wrap: wrap;
		justify-content: center;
	}

	select.form-select {
		padding: 0.5rem 1rem;
		border: 1px solid #ccc;
		border-radius: 6px;
		font-size: 1rem;
	}

	.selector-container {
		margin-bottom: 40px;
	}

	.bi {
		font-size: 1.4rem;
	}
</style>

<h3>
	<h3>@(nombreUsuario is null ? "Cargando..." : nombreUsuario)</h3></h3>

@if (roles is null || rolesAsignados is null)
{
	<p>Cargando...</p>
}
else
{
	<div class="form-inline selector-container">
		<!-- Selección de Rol -->
		<select class="form-select mb-2" @bind="rolSeleccionado">
			<option value="0">--Seleccione un rol--</option>
			@foreach (var rol in roles)
			{
				<option value="@rol.Nombre">@rol.Nombre</option>
			}
		</select>

		<!-- Botón para Asignar Rol -->
		<button class="btn btn-info mb-2" title="Asignar rol" @onclick="AsignarRol">
			<i class="bi bi-person-plus-fill"></i>
		</button>
	</div>

	<div class="table-responsive-wrapper">
		<table class="table">
			<thead>
				<tr>
					<th style="width: 60px;"></th>
					<th>Rol</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var rol in rolesAsignados)
				{
					<tr>
						<td class="icon-cell">
							<button class="btn" title="Remover rol" @onclick="() => RemoverRol(rol)">
								<i class="bi bi-person-dash-fill text-danger"></i>
							</button>
						</td>
						<td>@rol</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

@code {
	[Parameter]
	public string UsuarioId { get; set; } = null!;

	private List<RolDTO>? roles;
	private List<string>? rolesAsignados;
	private string rolSeleccionado = "0";
	private string? nombreUsuario;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var responseRoles = await Http.GetAsync("https://localhost:7123/api/usuarios/roles");
			if (!responseRoles.IsSuccessStatusCode)
			{
				var mensajeError = await responseRoles.Content.ReadAsStringAsync();
				await Swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
			}
			else
			{
				var jsonRoles = await responseRoles.Content.ReadAsStringAsync();
				roles = JsonSerializer.Deserialize<List<RolDTO>>(jsonRoles, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
			}

			await CargarRolesAsignados();
		}
		catch (Exception ex)
		{
			await Swal.FireAsync("Error", $"Ocurrió un error: {ex.Message}", SweetAlertIcon.Error);
		}

		var responseNombre = await Http.GetAsync($"https://localhost:7123/api/usuarios/obtenerNombre/{UsuarioId}");
		if (responseNombre.IsSuccessStatusCode)
		{
			nombreUsuario = await responseNombre.Content.ReadAsStringAsync();
			nombreUsuario = nombreUsuario.Trim('"'); // elimina comillas del string JSON plano
		}
		else
		{
			nombreUsuario = "Usuario desconocido";
		}
	}

	private async Task CargarRolesAsignados()
	{
		try
		{
			var response = await Http.GetAsync($"https://localhost:7123/api/usuarios/obtenerRoles/{UsuarioId}");
			if (response.IsSuccessStatusCode)
			{
				var json = await response.Content.ReadAsStringAsync();
				rolesAsignados = JsonSerializer.Deserialize<List<string>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
			}
			else
			{
				await Swal.FireAsync("Error", "No se pudieron cargar los roles asignados", SweetAlertIcon.Error);
			}
		}
		catch (Exception ex)
		{
			await Swal.FireAsync("Error", $"Ocurrió un error: {ex.Message}", SweetAlertIcon.Error);
		}
	}

	private async Task AsignarRol()
	{
		await EditarRol("https://localhost:7123/api/usuarios/asignarRol");
	}

	private async Task RemoverRol(string rol)
	{
		var rolDTO = new EditarRolDTO { Rol = rol, UsuarioId = UsuarioId };
		await EditarRol("https://localhost:7123/api/usuarios/removerRol", rolDTO);
	}

	private async Task EditarRol(string url, EditarRolDTO? rolDTOParam = null)
	{
		var dto = rolDTOParam ?? new EditarRolDTO { Rol = rolSeleccionado, UsuarioId = UsuarioId };

		if (string.IsNullOrWhiteSpace(dto.Rol) || dto.Rol == "0")
		{
			await Swal.FireAsync("Error", "Debe seleccionar un rol", SweetAlertIcon.Error);
			return;
		}

		try
		{
			var json = JsonSerializer.Serialize(dto);
			var content = new StringContent(json, Encoding.UTF8, "application/json");

			var response = await Http.PostAsync(url, content);

			if (!response.IsSuccessStatusCode)
			{
				var mensajeError = await response.Content.ReadAsStringAsync();
				await Swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
			}
			else
			{
				await Swal.FireAsync("Exitoso", "Operación realizada con éxito", SweetAlertIcon.Success);
				await CargarRolesAsignados();
			}
		}
		catch (Exception ex)
		{
			await Swal.FireAsync("Error", $"Ocurrió un error: {ex.Message}", SweetAlertIcon.Error);
		}
	}
}
