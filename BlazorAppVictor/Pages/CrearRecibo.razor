@page "/crear-recibo"
@using BlazorAppVictor.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject SweetAlertService Swal
@inject NavigationManager Navegador

<h3>Crear Recibo</h3>

<!-- Botón Volver -->
<button class="btn btn-secondary mb-3" @onclick="Volver">Volver</button>

<EditForm Model="recibo" OnValidSubmit="EnviarRecibo">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="NumeroRecibo" class="form-label">Número de Recibo</label>
        <InputText id="NumeroRecibo" class="form-control" @bind-Value="recibo.NumeroRecibo" />
    </div>
    <div class="mb-3">
        <label for="ClienteDNI" class="form-label">DNI del Cliente</label>
        <InputText id="ClienteDNI" class="form-control" @bind-Value="recibo.ClienteDNI" />
    </div>
    <div class="mb-3">
        <label for="Importe" class="form-label">Importe</label>
        <InputNumber id="Importe" class="form-control" @bind-Value="recibo.Importe" />
    </div>
    <div class="mb-3">
        <label for="FechaEmision" class="form-label">Fecha de Emisión (yyyy/MM/dd HH:mm:ss)</label>
        <InputDate id="FechaEmision" class="form-control" @bind-Value="recibo.FechaEmision" />
    </div>
    <button type="submit" class="btn btn-success">Crear Recibo</button>
</EditForm>

@code {
    private Recibo recibo = new Recibo();

    private async Task EnviarRecibo()
    {
        if (string.IsNullOrWhiteSpace(recibo.NumeroRecibo))
        {
            await Swal.FireAsync("Error", "El número de recibo no puede estar vacío.", SweetAlertIcon.Error);
            return;
        }
        if (string.IsNullOrWhiteSpace(recibo.ClienteDNI))
        {
            await Swal.FireAsync("Error", "El DNI del cliente no puede estar vacío.", SweetAlertIcon.Error);
            return;
        }
        if (recibo.Importe <= 0)
        {
            await Swal.FireAsync("Error", "El importe debe ser mayor a 0.", SweetAlertIcon.Error);
            return;
        }
        try
        {
            var respuesta = await Http.PostAsJsonAsync("https://localhost:7123/api/recibos", recibo);
            if (respuesta.IsSuccessStatusCode)
            {
                Navegador.NavigateTo("/recibos");
            }
            else
            {
                var error = await respuesta.Content.ReadAsStringAsync();
                await Swal.FireAsync("Error", error, SweetAlertIcon.Error);
            }
        }
        catch (Exception)
        {
            await Swal.FireAsync("Error", "Error al crear el recibo.", SweetAlertIcon.Error);
        }
    }

    void Volver()
    {
        Navegador.NavigateTo("/recibos");
    }
}
