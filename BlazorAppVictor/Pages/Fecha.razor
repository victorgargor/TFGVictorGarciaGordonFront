@page "/fecha"
@using System.Text.Json
@inject HttpClient Http
@inject SweetAlertService Swal

<PageTitle>Operaciones con Fechas</PageTitle>

<style>
	/* Estilos globales */
	body {
		font-family: 'Poppins', sans-serif;
		background-color: #f6f8fa;
		color: #24292f;
		margin: 0;
		padding: 20px;
		min-height: 100vh;
		display: flex;
		flex-direction: column;
		justify-content: center; 
		overflow: hidden;
	}

	/* Contenedor principal */
	.container {
		max-width: 1400px;
		width: 90%;
		margin: auto;
		padding: 20px;
		margin-top: 100px;
		border-radius: 12px;
		box-shadow: 0 0 10px rgba(27, 31, 35, 0.1);
		display: grid;
		grid-template-columns: 1fr;
		gap: 20px;
		align-items: center;
	}

	/* Título */
	h1 {
		color: black;
		text-align: center;
		font-size: 3rem;
		font-weight: bold;
		margin-bottom: 30px;
	}

	/* Sección de inputs */
	.input-section {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
		gap: 20px;
	}

	.input-section input {
		padding: 12px;
		font-size: 1rem;
		border: 1px solid #ccc;
		border-radius: 6px;
		box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
	}

	.input-section input:focus {
		border-color: #66afe9;
		outline: none;
		box-shadow: 0 0 8px rgba(102, 175, 233, 0.6);
	}

	/* Sección de botones */
	.buttons-section {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
		gap: 20px;
	}

	.btn-operation {
		background-color: #0969da;
		color: white;
		font-size: 1rem;
		font-weight: bold;
		padding: 12px;
		border: solid 1px black;
		border-radius: 6px;
		cursor: pointer;
		transition: all 0.3s;
		text-align: center;
	}

	.btn-operation:hover {
		background-color: #0550ae;
		transform: scale(1.05);
	}

	/* Sección de salida */
	.output-section {
		display: flex;
		flex-direction: column;
		gap: 10px;
	}

	textarea {
		width: 100%;
		min-height: 300px;
		padding: 16px;
		font-size: 1rem;
		line-height: 1.5;
		color: #333;
		background-color: #fff;
		border: 1px solid #ccc;
		border-radius: 8px;
		box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
		resize: none;
	}

	textarea:focus {
		border-color: #66afe9;
		outline: none;
		box-shadow: 0 0 8px rgba(102, 175, 233, 0.6);
	}
</style>

<h1>Operaciones con Fechas</h1>

<div class="container">
    <!-- Inputs -->
    <div class="input-section">
        <input @bind="fecha1" type="text" placeholder="Ingrese la primera fecha (yyyy/MM/dd)" />
        <input @bind="fecha2" type="text" placeholder="Ingrese la segunda fecha (yyyy/MM/dd)" />
    </div>

    <!-- Botones -->
    <div class="buttons-section">
        <button class="btn-operation" @onclick='() => RealizarOperacion("diferencia")'>Calcular Diferencia</button>
        <button class="btn-operation" @onclick='() => RealizarOperacion("inicio-fin")'>Inicio y Fin del Año</button>
        <button class="btn-operation" @onclick='() => RealizarOperacion("dias")'>Mostrar Días del Año</button>
        <button class="btn-operation" @onclick='() => RealizarOperacion("semana")'>Mostrar Semana del Año</button>
    </div>

    <!-- Salida -->
    <div class="output-section">
        <label for="resultText">Resultado:</label>
        <textarea id="resultText" readonly @bind="resultado"></textarea>
    </div>
</div>

@code {
    // Variables para almacenar las fechas ingresadas por el usuario
    private string? fecha1;
    private string? fecha2;

    // Variable para almacenar el resultado
    private string? resultado;

    /// <summary>
    /// Método general para realizar la operación seleccionada con las fechas ingresadas.
    /// </summary>
    /// <param name="operacion">La operación a realizar (diferencia, inicio-fin, dias, semana).</param>
    /// <returns>Tarea asincrónica.</returns>
    private async Task RealizarOperacion(string operacion)
    {
        // Valido que se hayan ingresado las dos fechas
        if (string.IsNullOrWhiteSpace(fecha1) || string.IsNullOrWhiteSpace(fecha2))
        {
            await Swal.FireAsync("Error", "Por favor, ingrese ambas fechas.", SweetAlertIcon.Error);
            resultado = null;
            return;
        }

        // Creo el objeto para enviar en la solicitud (FechasRequest)
        var fechasRequest = new
        {
            Fecha1 = fecha1,
            Fecha2 = fecha2
        };

        // Construyo la URL para la API dependiendo de la operación
        string url = $"https://localhost:7123/api/fecha/{operacion}";

        // Realizo la solicitud POST a la API para la operación seleccionada
        try
        {
            var response = await Http.PostAsJsonAsync(url, fechasRequest);

            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<JsonElement>();
                resultado = ObtenerResultado(data, operacion);
            }
            else
            {
				// Si la fecha no es correcta o el formato
				await Swal.FireAsync("Error", "El formato admitido es yyyy/MM/dd o la fecha seleccionada no está admitida.", SweetAlertIcon.Error);
                resultado = null;
            }
        }
        catch (Exception ex)
        {
			// Manejo de excepciones
            await Swal.FireAsync("Error", $"{ex.Message}", SweetAlertIcon.Error);
            resultado = null;
        }
    }

    /// <summary>
    /// Método para obtener el resultado basado en la operación seleccionada.
    /// </summary>
    /// <param name="data">Datos JSON obtenidos de la respuesta de la API.</param>
    /// <param name="operacion">La operación realizada (diferencia, inicio-fin, dias, semana).</param>
    /// <returns>El resultado en formato de cadena.</returns>
    private string ObtenerResultado(JsonElement data, string operacion)
    {
        return operacion switch
        {
            "diferencia" => $"Diferencia: {data.GetProperty("diferencia").GetString()}",
            "inicio-fin" => $"Primera fecha: {data.GetProperty("primeraFecha").GetString()}{Environment.NewLine}Segunda fecha: {data.GetProperty("segundaFecha").GetString()}",
            "dias" => $"Primera fecha: {data.GetProperty("primeraFecha").GetString()}{Environment.NewLine}Segunda fecha: {data.GetProperty("segundaFecha").GetString()}",
            "semana" => $"Primera fecha: {data.GetProperty("primeraFecha").GetString()}{Environment.NewLine}Segunda fecha: {data.GetProperty("segundaFecha").GetString()}",
            _ => "Operación desconocida"
        };
    }
}
