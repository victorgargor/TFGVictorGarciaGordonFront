@page "/texto"
@using System.Text.Json
@using System.Text
@inject HttpClient Http
@inject SweetAlertService Swal

<PageTitle>Operaciones con Texto</PageTitle>

<style>
	/* Estilos globales */
	body {
		font-family: 'Poppins', sans-serif;
		background-color: #f6f8fa;
		color: #24292f;
		margin: 0;
		padding: 20px;
		min-height: 100vh;
		display: flex;
		flex-direction: column;
		justify-content: center; /* Centrar verticalmente */
		overflow: hidden;
	}

	/* Contenedor principal */
	.container {
		max-width: 1400px;
		width: 90%;
		margin: auto;
		padding: 20px;
		margin-top: 100px;
		border-radius: 12px;
		box-shadow: 0 0 10px rgba(27, 31, 35, 0.1);
		display: grid;
		grid-template-columns: 2fr 1fr 2fr;
		gap: 20px;
		align-items: center;
	}

	/* Título */
	h1 {
		color: black;
		text-align: center;
		font-size: 3rem;
		font-weight: bold;
		margin-bottom: 30px;
		grid-column: 1 / -1;
	}

	.input-section {
		display: flex;
		flex-direction: column;
		gap: 20px;
	}

	.form-group {
		display: flex;
		flex-direction: column;
	}

	label {
		font-size: 1.2rem;
		margin-bottom: 5px;
	}

	/* Textareas */
	textarea {
		width: 100%;
		min-height: 300px;
		padding: 16px;
		font-size: 1rem;
		line-height: 1.5;
		color: #333;
		background-color: #fff;
		border: 1px solid #ccc;
		border-radius: 8px;
		box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
		resize: none;
	}

		textarea:focus {
			border-color: #66afe9;
			outline: none;
			box-shadow: 0 0 8px rgba(102, 175, 233, 0.6);
		}

	/* Número de concatenaciones */
	#inputTimes {
		width: 100%;
		padding: 12px;
		font-size: 1rem;
		border-radius: 6px;
		border: 1px solid #ccc;
		box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
	}

		#inputTimes:focus {
			border-color: #66afe9;
			outline: none;
			box-shadow: 0 0 8px rgba(102, 175, 233, 0.6);
		}

	/* Botones */
	.btn-operation {
		width: 100%;
		background-color: #0969da;
		color: white;
		font-size: 1rem;
		font-weight: bold;
		padding: 12px;
		border: solid 1px black;
		border-radius: 6px;
		cursor: pointer;
		transition: all 0.3s;
		text-align: center;
		margin-bottom: 10px; 
	}

		.btn-operation:hover {
			background-color: #0550ae;
			transform: scale(1.1);
		}

	/* Salida */
	.output-section {
		display: flex;
		flex-direction: column;
		gap: 10px;
	}
</style>

<h1>Operaciones con Texto</h1>

<div class="container">
	<!-- Inputs -->
	<div class="input-section">
		<div class="form-group">
			<label for="inputText">Texto de Entrada:</label>
			<textarea id="inputText" @bind="inputText" placeholder="Escribe tu texto aquí..."></textarea>
		</div>

		<div class="form-group">
			<label for="inputTimes">Número de concatenaciones:</label>
			<input type="number" id="inputTimes" @bind="veces" min="1" max="100000" />
		</div>
	</div>

	<!-- Botones -->
	<div class="button-section">
		<button class="btn-operation" @onclick='() => RealizarOperacion("contar")'>Contar Carácteres</button>
		<button class="btn-operation" @onclick='() => RealizarOperacion("mayusculas")'>Mayúsculas</button>
		<button class="btn-operation" @onclick='() => RealizarOperacion("minusculas")'>Minúsculas</button>
		<button class="btn-operation" @onclick='() => RealizarOperacion("repetidas")'>Palabras Repetidas</button>
		<button class="btn-operation" @onclick='() => RealizarOperacion("reemplazar")'>Reemplazar</button>
		<button class="btn-operation" @onclick='() => RealizarOperacion("concatenar")'>Concatenar</button>
	</div>

	<!-- Salida -->
	<div class="output-section">
		<div class="form-group">
			<label for="resultText">Resultado:</label>
			<textarea id="resultText" readonly>@resultado</textarea>
		</div>
	</div>
</div>

@code {
	// Texto que introduce el usuario
	private string inputText = "";

	// Resultado de la operación
	private string resultado = "";  

	// Número de veces para concatenar
	private int veces = 1; 

	// Variable para validar el número de veces
	private bool esValido = true; 

	/// <summary>
	/// Realiza la operación seleccionada por el usuario.
	/// Si no hay texto ingresado, se usa el valor por defecto.
	/// </summary>
	/// <param name="operacion">El tipo de operación a realizar</param>
	private async Task RealizarOperacion(string operacion)
	{
		// Si no hay texto se usar el texto por defecto
		if (string.IsNullOrWhiteSpace(inputText))
		{
			inputText = "Proconsi es una empresa de Tecnologías de la Información y la Comunicación especializada en el desarrollo e integración de soluciones informáticas para todo tipo de empresas. Más de tres décadas de experiencia avalan a una compañía tan flexible como responsable. Cuenta con un equipo multidisciplinar de más de 120 profesionales cualificados, expertos y comprometidos con un único objetivo: hallar la solución tecnológica exacta para cada cliente. Proconsi es especialista en la creación y el desarrollo de software de gestión, consultoría tecnológica, dirección y gestión de proyectos I+D+i basados en TIC, soporte técnico, aplicaciones móviles y fomento de tendencias en nuevas tecnologías, como el cloud computing.";
		}

		// Valido el número de concatenaciones en la operación de concatenar solo
		if (operacion == "concatenar" && (veces <= 0 || veces > 100000))
		{
			// En caso de que se introduzca un valor no permitido
			await Swal.FireAsync("Error", "El número de veces debe ser mayor a 0 y menor o igual a 100000.", SweetAlertIcon.Error);
			return;  
		}

		// Construyo la URL de la API dependiendo de la operación
		string url = $"https://localhost:7123/api/texto/{operacion}";

		// Ejecutar la operación dependiendo del tipo
		switch (operacion)
		{
			case "concatenar":
				// Para concatenar, necesito enviar el texto y el número de veces
				var concatenarRequest = new { Texto = inputText, Veces = veces };
				await HacerPeticion(url, concatenarRequest);
				break;

			default:
				// Para el resto de operaciones solo necesito el texto
				await HacerPeticion(url, inputText);
				break;
		}
	}

	/// <summary>
	/// Realiza una petición a la API y obtiene el resultado de la operación.
	/// </summary>
	/// <param name="url">URL de la API a la que se hará la solicitud</param>
	/// <param name="data">El texto o datos a enviar en el cuerpo de la solicitud</param>
	private async Task HacerPeticion(string url, object data)
	{
		try
		{
			// Hago la petición a la API
			var respuesta = await Http.PostAsJsonAsync(url, data);

			// Si fue exitosa la respuesta
			if (respuesta.IsSuccessStatusCode)
			{
				// Leo el JSON
				var respuestaJson = await respuesta.Content.ReadFromJsonAsync<JsonElement>();

				// Dependiendo de la operación, se obtiene la respuesta correspondiente
				if (respuestaJson.TryGetProperty("tiempoConcatenacion", out var tiempoConcatenacion) &&
					respuestaJson.TryGetProperty("longitudTexto", out var longitudTexto))
				{
					// Concatenación
					resultado = $"Tiempo de concatenación: {tiempoConcatenacion}{Environment.NewLine}Longitud del texto concatenado (carácteres): {longitudTexto}";
				}
				else if (respuestaJson.TryGetProperty("caracteres", out var caracteres))
				{
					// Contar carácteres
					resultado = $"Carácteres: {caracteres}.";
				}
				else if (respuestaJson.TryGetProperty("textoConvertido", out var textoConvertido))
				{
					// Pasar a mayúsculas o a minúsculas
					resultado = $"{textoConvertido}";
				}
				else if (respuestaJson.TryGetProperty("palabrasRepetidas", out var palabrasRepetidas))
				{
					// Deserializo las palabras repetidas
					var palabrasRepetidasDict = JsonSerializer.Deserialize<Dictionary<string, int>>(palabrasRepetidas.ToString());

					// Valido que haya palabras repetidas
					if (palabrasRepetidasDict != null && palabrasRepetidasDict.Any())
					{
						var resultadoRepetidas = new StringBuilder();

						// Creo una lista con las palabras repetidas para formatear la salida
						foreach (var palabra in palabrasRepetidasDict)
						{
							resultadoRepetidas.AppendLine($"- {palabra.Key}: {palabra.Value} veces");
						}

						resultado = resultadoRepetidas.ToString();
					}
					else
					{
						// Si no hay palabras repetidas
						resultado = "No hay palabras repetidas.";
					}
				}
				else if (respuestaJson.TryGetProperty("textoReemplazado", out var textoReemplazado))
				{
					// Reemplazar el texto
					resultado = $"Texto modificado:{Environment.NewLine}{textoReemplazado}";
				}
				else
				{
					// Sino hay propiedad o hubo un error
					await Swal.FireAsync("Error", "Error en la respuesta de la operación.", SweetAlertIcon.Error);
				}
			}
			else
			{
				// Si la solicitud falla
				await Swal.FireAsync("Error", "Error en la conexión con el servidor.", SweetAlertIcon.Error);
			}
		}
		catch (Exception ex)
		{
			// Manejo de excepciones
			await Swal.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
		}
	}
}
