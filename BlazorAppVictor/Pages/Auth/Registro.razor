@page "/registro"
@using BlazorAppVictor.Auth
@using BlazorAppVictor.DTOs
@inject HttpClient Http
@inject SweetAlertService Swal
@inject ILoginService loginService
@inject NavigationManager Navegador

<style>

    body, input, button {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .registro-card {
        max-width: 380px;
        margin: 3rem auto;
        padding: 2rem 1.5rem;
        background: #ffffff;
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
    }

        .registro-card h3 {
            font-size: 1.75rem;
            font-weight: 600;
            color: #333;
            text-align: center;
            margin-bottom: 1.5rem;
        }

    .input-group {
        position: relative;
        margin-bottom: 1.5rem; 
    }

        .input-group i {
            position: absolute;
            top: 50%;
            left: 0.75rem;
            transform: translateY(-50%);
            color: #888;
            font-size: 1rem;
        }

        .input-group .form-control {
            padding-left: 2.5rem;
            border: 1px solid #ced4da;
            border-radius: 6px;
            height: 2.75rem;
            transition: border-color 0.2s, box-shadow 0.2s;
        }

            .input-group .form-control:focus {
                border-color: #5b9bd5;
                box-shadow: 0 0 0 0.2rem rgba(91, 155, 213, 0.25);
                outline: none;
            }

    .validation-message {
        display: block; 
        color: #d9534f;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        margin-bottom: 1rem; 
    }

    .btn-registro {
        background: linear-gradient(135deg, #5b9bd5 0%, #4a7bb7 100%);
        border: none;
        border-radius: 6px;
        padding: 0.65rem;
        font-size: 1rem;
        font-weight: 500;
        color: #fff;
        width: 100%;
        transition: background 0.3s, transform 0.1s;
    }

        .btn-registro:hover {
            background: linear-gradient(135deg, #4a7bb7 0%, #5b9bd5 100%);
        }

        .btn-registro:active {
            transform: scale(0.98);
        }
</style>

<div class="registro-card">
    <h3>Crear cuenta</h3>

    <EditForm Model="userInfo" OnValidSubmit="CrearUsuario">
        <DataAnnotationsValidator />

        <!-- Email -->
        <div class="input-group">
            <i class="fa-solid fa-envelope"></i>
            <InputText id="email"
                       type="email"
                       class="form-control"
                       placeholder="Correo electrónico"
                       @bind-Value="userInfo.Email" />
        </div>
        <ValidationMessage For="@(() => userInfo.Email)"
                           class="validation-message" />

        <!-- Contraseña -->
        <div class="input-group">
            <i class="fa-solid fa-lock"></i>
            <InputText id="password"
                       type="password"
                       class="form-control"
                       placeholder="Contraseña"
                       @bind-Value="userInfo.Password" />
        </div>
        <ValidationMessage For="@(() => userInfo.Password)"
                           class="validation-message" />

        <button type="submit" class="btn-registro">Registrarme</button>
    </EditForm>
</div>

@code {
    // Creo una instancia del modelo que se enlaza al formulario
    private UserInfoDTO userInfo = new();

    // Método que se ejecuta cuando se envía el formulario y pasa la validación
    private async Task CrearUsuario()
    {
        // Envio la solicitud HTTP POST al backend para crear el usuario
        var response = await Http.PostAsJsonAsync("https://localhost:7123/api/cuentas/crear", userInfo);

        // Si la hay un error
        if (!response.IsSuccessStatusCode)
        {
            // Obtengo el mensaje de error del servidor
            var errorMessage = await response.Content.ReadAsStringAsync();

            // Muestro una alerta con el error
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error del servidor",
                    Text = errorMessage,
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "Ok"
                });
        }
        else
        {
            // Si el registro fue exitoso, obtengo el token devuelto
            var userToken = await response.Content.ReadFromJsonAsync<UserTokenDTO>();

            // Inicio sesión automáticamente con ese token
            await loginService.Login(userToken.Token);

            // Muestro el mensaje de éxito
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "¡Registro exitoso!",
                    Text = "Su cuenta se ha creado correctamente.",
                    Icon = SweetAlertIcon.Success,
                    ConfirmButtonText = "Òk"
                });

            // Redirijo al usuario a la página principal
            Navegador.NavigateTo("/");
        }
    }
}