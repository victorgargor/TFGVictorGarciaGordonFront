@page "/recibos"
@using BlazorAppVictor.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject SweetAlertService Swal
@inject NavigationManager Navegador

<h3>Lista de Recibos</h3>

<!-- Botones de navegación -->
<div class="mb-3">
    <button class="btn btn-success me-2" @onclick="IrACrearRecibo">Crear Recibo</button>
    <button class="btn btn-info" @onclick="IrAClientes">Ver Clientes</button>
</div>

@if (listaRecibos == null)
{
    <p><em>Cargando recibos...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Número de Recibo</th>
                <th>Cliente DNI</th>
                <th>Importe</th>
                <th>Fecha de Emisión</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var recibo in recibosPaginados)
            {
                <tr>
                    <td>@recibo.NumeroRecibo</td>
                    <td>@recibo.ClienteDNI</td>
                    <td>@recibo.Importe.ToString("C")</td>
                    <td>@recibo.FechaEmision.ToString("yyyy/MM/dd HH:mm:ss")</td>
                    <td>
                        <a class="btn btn-primary btn-sm" href="/ver-recibo/@recibo.NumeroRecibo">Ver</a>
                        <a class="btn btn-primary btn-sm" href="/editar-recibo/@recibo.NumeroRecibo">Editar</a>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarRecibo(recibo.NumeroRecibo)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav>
        <ul class="pagination">
            <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="Anterior">Anterior</button>
            </li>
            @for (int i = 1; i <= totalPaginas; i++)
            {
                <li class="page-item @(paginaActual == i ? "active" : "")">
                    <button class="page-link" @onclick="() => IrAPagina(i)">@i</button>
                </li>
            }
            <li class="page-item @(paginaActual == totalPaginas ? "disabled" : "")">
                <button class="page-link" @onclick="Siguiente">Siguiente</button>
            </li>
        </ul>
    </nav>
}

@code {
    private List<Recibo> listaRecibos;
    private List<Recibo> recibosPaginados;
    private int paginaActual = 1;
    private int tamanoPagina = 5;
    private int totalPaginas = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            listaRecibos = await Http.GetFromJsonAsync<List<Recibo>>("https://localhost:7123/api/recibos");
            totalPaginas = (int)Math.Ceiling((double)listaRecibos.Count / tamanoPagina);
            IrAPagina(1);
        }
        catch (Exception)
        {
            await Swal.FireAsync("Error", "Error al cargar los recibos.", SweetAlertIcon.Error);
        }
    }

    void IrAPagina(int pagina)
    {
        paginaActual = pagina;
        recibosPaginados = listaRecibos.Skip((paginaActual - 1) * tamanoPagina).Take(tamanoPagina).ToList();
    }

    void Anterior()
    {
        if (paginaActual > 1)
        {
            IrAPagina(paginaActual - 1);
        }
    }

    void Siguiente()
    {
        if (paginaActual < totalPaginas)
        {
            IrAPagina(paginaActual + 1);
        }
    }

    async Task EliminarRecibo(string numeroRecibo)
    {
        try
        {
            var respuesta = await Http.DeleteAsync($"https://localhost:7123/api/recibos/{numeroRecibo}");
            if (respuesta.IsSuccessStatusCode)
            {
                listaRecibos = await Http.GetFromJsonAsync<List<Recibo>>("https://localhost:7123/api/recibos");
                totalPaginas = (int)Math.Ceiling((double)listaRecibos.Count / tamanoPagina);
                IrAPagina(paginaActual > totalPaginas ? totalPaginas : paginaActual);
            }
            else
            {
                await Swal.FireAsync("Error", "No se pudo eliminar el recibo.", SweetAlertIcon.Error);
            }
        }
        catch (Exception)
        {
            await Swal.FireAsync("Error", "Error al eliminar el recibo.", SweetAlertIcon.Error);
        }
    }

    void IrACrearRecibo()
    {
        Navegador.NavigateTo("/crear-recibo");
    }

    void IrAClientes()
    {
        Navegador.NavigateTo("/clientes");
    }
}
