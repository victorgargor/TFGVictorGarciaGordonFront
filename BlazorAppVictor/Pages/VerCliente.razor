@page "/ver-cliente/{dni}"
@using BlazorAppVictor.Models
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@inject SweetAlertService Swal
@inject NavigationManager Navegador
@inject IJSRuntime JSRuntime  

<h3>Detalles del Cliente</h3>

<button class="btn btn-secondary mb-3" @onclick="Volver">Volver</button>

@if (cliente == null)
{
    <p><em>Cargando cliente...</em></p>
}
else
{
    <div class="card mb-3">
        <div class="card-header">
            <strong>@cliente.Nombre @cliente.Apellido1 @cliente.Apellido2 (@cliente.DNI)</strong>
        </div>
        <div class="card-body">
            <p><strong>Tipo:</strong> @cliente.Tipo</p>
            <p><strong>Cuota Máxima:</strong> @(cliente.CuotaMaxima.HasValue ? cliente.CuotaMaxima.Value.ToString("C") : "N/A")</p>
            <p><strong>Fecha de Alta:</strong> @cliente.FechaAlta.ToString("yyyy/MM/dd HH:mm:ss")</p>
            <p><strong>Fecha de Baja:</strong> @(cliente.FechaBaja.HasValue ? cliente.FechaBaja.Value.ToString("yyyy/MM/dd HH:mm:ss") : "Activo")</p>
        </div>
    </div>

    <!-- Solo se muestra el botón de crear recibo si el cliente está activo -->
    @if (!cliente.FechaBaja.HasValue)
    {
        <button class="btn btn-primary mb-3" @onclick="CrearRecibo">Crear Nuevo Recibo</button>
    }

    <h4>Recibos del Cliente</h4>

    @if (recibos == null)
    {
        <p><em>Cargando recibos...</em></p>
    }
    else if (recibos.Count == 0)
    {
        <p>El cliente no tiene ningún recibo asociado.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Recibo</th>
                    <th>Fecha</th>
                    <th>Importe</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var recibo in recibos)
                {
                    <tr>
                        <td>@recibo.NumeroRecibo</td>
                        <td>@recibo.FechaEmision.ToString("yyyy/MM/dd")</td>
                        <td>@recibo.Importe.ToString("C")</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => EditarRecibo(recibo.Id)">Editar</button>
                            <button class="btn btn-danger" @onclick="() => EliminarRecibo(recibo.Id)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [Parameter] public string dni { get; set; }
    private Cliente cliente;
    private List<Recibo> recibos;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Buscar cliente por DNI
            cliente = await Http.GetFromJsonAsync<Cliente>($"https://localhost:7123/api/clientes/{dni}");

            if (cliente != null)
            {
                // Guardar el cliente en sessionStorage
                var clienteJson = JsonSerializer.Serialize(cliente);
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "cliente", clienteJson);

                // Obtener los recibos del cliente usando su Id
                var response = await Http.GetAsync($"https://localhost:7123/api/recibos/cliente/{cliente.Id}");
                if (response.IsSuccessStatusCode)
                {
                    recibos = await response.Content.ReadFromJsonAsync<List<Recibo>>();
                }
                else
                {
                    recibos = new List<Recibo>();  // No hay recibos, simplemente se muestra vacío
                }
            }
            else
            {
                await Swal.FireAsync("Error", "Cliente no encontrado.", SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            // Mostrar error con SweetAlert si ocurre una excepción al cargar datos
            await Swal.FireAsync("Error", $"Error al cargar los datos del cliente: {ex.Message}", SweetAlertIcon.Error);
        }
    }

    private void Volver()
    {
        Navegador.NavigateTo("/clientes");
    }

    private async Task CrearRecibo()
    {
        // Navega a la página de crear recibo usando el DNI del cliente
        Navegador.NavigateTo($"/crear-recibo/{cliente.DNI}");
    }

    private async Task EditarRecibo(int id)
    {
        // Navega a la página de editar recibo usando el ID del recibo
        Navegador.NavigateTo($"/editar-recibo/{id}");
    }

    private async Task EliminarRecibo(int id)
    {
        try
        {
            // Mostrar confirmación para eliminar el recibo
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Desea eliminar el recibo?",
                    Text = "Esta acción no se puede deshacer.",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Eliminar",
                    CancelButtonText = "No",
                    ConfirmButtonColor = "#d33", // Color rojo para el botón de eliminar
                    ReverseButtons = false,        // Invierte el orden de los botones (eliminación será primero)
                    FocusCancel = true            // Establece el foco en el botón "No"
                });

            // Si se confirma la eliminación
            if (result.IsConfirmed)
            {
                var response = await Http.DeleteAsync($"https://localhost:7123/api/recibos/{id}");
                if (response.IsSuccessStatusCode)
                {
                    // Mostrar mensaje de éxito
                    await Swal.FireAsync("Éxito", "Recibo eliminado con éxito.", SweetAlertIcon.Success);
                    // Eliminar el recibo de la lista local para actualizar la interfaz
                    recibos.RemoveAll(r => r.Id == id);
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    await Swal.FireAsync("Error", $"No se pudo eliminar el recibo: {error}", SweetAlertIcon.Error);
                }
            }
        }
        catch (Exception ex)
        {
            // Mostrar error si ocurre un problema al eliminar
            await Swal.FireAsync("Error", $"Ocurrió un error al intentar eliminar el recibo: {ex.Message}", SweetAlertIcon.Error);
        }
    }
}