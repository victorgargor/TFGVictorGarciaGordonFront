@page "/ver-cliente/{dni}"
@using BlazorAppVictor.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject SweetAlertService Swal
@inject NavigationManager Navegador

<h3>Detalles del Cliente</h3>

<button class="btn btn-secondary mb-3" @onclick="Volver">Volver</button>

@if (cliente == null)
{
    <p><em>Cargando cliente...</em></p>
}
else
{
    <div class="card mb-3">
        <div class="card-header">
            <strong>@cliente.Nombre @cliente.Apellido1 @cliente.Apellido2 (@cliente.DNI)</strong>
        </div>
        <div class="card-body">
            <p><strong>Tipo:</strong> @cliente.Tipo</p>
            <p><strong>Cuota Máxima:</strong> @(cliente.CuotaMaxima.HasValue ? cliente.CuotaMaxima.Value.ToString("C") : "N/A")</p>
            <p><strong>Fecha de Alta:</strong> @cliente.FechaAlta.ToString("yyyy/MM/dd HH:mm:ss")</p>
            <p><strong>Fecha de Baja:</strong> @(cliente.FechaBaja.HasValue ? cliente.FechaBaja.Value.ToString("yyyy/MM/dd HH:mm:ss") : "Activo")</p>
        </div>
    </div>

    @if (cliente.FechaBaja.HasValue)
    {
        <button class="btn btn-success" @onclick="ReactivarCliente">Reactivar Cliente</button>
    }
    else
    {
        <button class="btn btn-danger" @onclick="DarBaja">Dar Baja al Cliente</button>
    }
}

@code {
    [Parameter] public string dni { get; set; }
    private Cliente cliente;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cliente = await Http.GetFromJsonAsync<Cliente>($"https://localhost:7123/api/clientes/{dni}");
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Error", $"Error al cargar el cliente: {ex.Message}", SweetAlertIcon.Error);
            Volver();
        }
    }

    private async Task DarBaja()
    {
        try
        {
            // Especificamos que el tipo de cuerpo es 'object' para resolver el problema de la inferencia de tipos
            var respuesta = await Http.PostAsJsonAsync<object>($"https://localhost:7123/api/clientes/dar-baja/{cliente.DNI}", null);
            if (respuesta.IsSuccessStatusCode)
            {
                await Swal.FireAsync("Éxito", "Cliente dado de baja con éxito.", SweetAlertIcon.Success);
                Volver();
            }
            else
            {
                var error = await respuesta.Content.ReadAsStringAsync();
                await Swal.FireAsync("Error", error, SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Error", $"Error al dar de baja al cliente: {ex.Message}", SweetAlertIcon.Error);
        }
    }

    private async Task ReactivarCliente()
    {
        try
        {
            // Especificamos que el tipo de cuerpo es 'object' para resolver el problema de la inferencia de tipos
            var respuesta = await Http.PostAsJsonAsync<object>($"https://localhost:7123/api/clientes/reactivar/{cliente.DNI}", null);
            if (respuesta.IsSuccessStatusCode)
            {
                await Swal.FireAsync("Éxito", "Cliente reactivado con éxito.", SweetAlertIcon.Success);
                Volver();
            }
            else
            {
                var error = await respuesta.Content.ReadAsStringAsync();
                await Swal.FireAsync("Error", error, SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Error", $"Error al reactivar al cliente: {ex.Message}", SweetAlertIcon.Error);
        }
    }

    public void Volver()
    {
        Navegador.NavigateTo("/clientes");
    }
}

