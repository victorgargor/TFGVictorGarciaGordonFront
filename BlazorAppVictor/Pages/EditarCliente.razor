@page "/editar-cliente/{ClienteId}"
@using BlazorAppVictor.Models
@using System.Text.RegularExpressions
@using System.Net.Http.Json
@inject HttpClient Http
@inject SweetAlertService Swal
@inject NavigationManager Navegador

<h3>Editar cliente</h3>

<!-- Botón Volver -->
<button class="btn btn-secondary" @onclick="Volver">Volver</button>

<!-- Contenedor -->
<div class="form-container">
    <!-- Formulario -->
    <form @onsubmit="HandleSubmit">
        <!-- DNI -->
        <div class="mb-3">
            <label for="DNI" class="form-label">DNI (*)</label>
            <input id="DNI" class="form-control" type="text" @bind="cliente.DNI" />
        </div>

        <!-- Nombre completo -->
        <div class="mb-3">
            <label for="Nombre" class="form-label">Nombre completo (*)</label>
            <input id="Nombre" class="form-control" type="text" @bind="cliente.Nombre" />
        </div>

        <!-- Tipo de cliente -->
        <div class="mb-3">
            <label for="Tipo" class="form-label">Tipo de cliente</label>
            <select id="Tipo" class="form-control" @bind="cliente.Tipo">
                <option value="">Seleccione...</option>
                <option value="REGISTRADO">REGISTRADO</option>
                <option value="SOCIO">SOCIO</option>
            </select>
        </div>

        <!-- Cuota máxima (solo para clientes REGISTRADOS) -->
        @if (cliente.Tipo == TipoCliente.REGISTRADO)
        {
            <div class="mb-3">
                <label for="CuotaMaxima" class="form-label">Cuota máxima (*)</label>
                <input id="CuotaMaxima" class="form-control" type="number" step="any" @bind="cliente.CuotaMaxima" />
            </div>
        }

        <!-- Fecha de alta -->
        <div class="mb-3">
            <label for="FechaAlta" class="form-label">Fecha de alta (yyyy/MM/dd HHmmss) (*)</label>
            <input id="FechaAlta" class="form-control" type="text" @bind="fechaAltaTexto" />
        </div>

        <!-- Botón Crear -->
        <button type="submit" class="btn btn-success">Actualizar cliente</button>
    </form>
</div>

@code {
    [Parameter]
    public int ClienteId { get; set; }

    // Inicialización de cliente con valores predeterminados
    private Cliente cliente = new Cliente
        {
            DNI = string.Empty,
            Nombre = string.Empty,
            Tipo = TipoCliente.REGISTRADO, // O SOCIO, dependiendo del caso
            FechaAlta = DateTime.UtcNow
        };

    private string? fechaAltaTexto;

    protected override async Task OnInitializedAsync()
    {
        // Cargar los datos del cliente cuando se inicializa el componente
        await CargarCliente();
    }

    private async Task CargarCliente()
    {
        try
        {
            // Obtener los datos del cliente desde la API
            var response = await Http.GetFromJsonAsync<Cliente>($"https://localhost:7123/api/clientes/{ClienteId}");

            // Verificamos si la respuesta es válida y asignamos los datos al cliente
            if (response != null)
            {
                cliente = response;

                // Convertir la fecha de alta a texto para mostrarla en el formulario
                fechaAltaTexto = cliente.FechaAlta.ToString("yyyy/MM/dd HHmmss");
            }
            else
            {
                await Swal.FireAsync("Error", "No se ha encontrado el cliente.", SweetAlertIcon.Error);
                Navegador.NavigateTo("/clientes");
            }
        }
        catch (Exception ex)
        {
            // Manejo de excepciones
            await Swal.FireAsync("Error", $"Error al cargar los datos del cliente: {ex.Message}", SweetAlertIcon.Error);
        }
    }

    private async Task HandleSubmit(EventArgs e)
    {
        // Validar y actualizar cliente
        await ActualizarCliente();
    }

    private async Task ActualizarCliente()
    {
        // Validaciones antes de enviar

        // Valido que se introduzca un nombre
        if (string.IsNullOrWhiteSpace(cliente.Nombre))
        {
            await Swal.FireAsync("Error", "El nombre del cliente es obligatorio", SweetAlertIcon.Error);
            return;
        }

        // Si el cliente es REGISTRADO debe tener una cuota máxima válida y debe de ser un número positivo mayor que 0)
        if (cliente.Tipo == TipoCliente.REGISTRADO && (!cliente.CuotaMaxima.HasValue || cliente.CuotaMaxima <= 0))
        {
            await Swal.FireAsync("Error", "Los clientes REGISTRADOS deben tener una cuota máxima válida (número positivo mayor que 0)", SweetAlertIcon.Error);
            return;
        }

        // Si es SOCIO no deben tener cuota máxima
        if (cliente.Tipo == TipoCliente.SOCIO && cliente.CuotaMaxima.HasValue)
        {
            await Swal.FireAsync("Error", "Los SOCIOS no deben tener una cuota máxima.", SweetAlertIcon.Error);
            return;
        }

        // Valido que la fecha se ponga y que tenga el formato "yyyy/MM/dd HHmmss"
        if (string.IsNullOrWhiteSpace(fechaAltaTexto))
        {
            await Swal.FireAsync("Error", "La fecha de alta es obligatoria", SweetAlertIcon.Error);
            return;
        }
        if (!DateTime.TryParseExact(fechaAltaTexto, "yyyy/MM/dd HHmmss",
                System.Globalization.CultureInfo.InvariantCulture,
                System.Globalization.DateTimeStyles.None, out DateTime fechaAlta))
        {
            await Swal.FireAsync("Error", "La fecha de alta debe tener el formato 'yyyy/MM/dd HHmmss' y valores lógicos.", SweetAlertIcon.Error);
            return;
        }

        // Convierto la fecha a UTC para la base de datos
        cliente.FechaAlta = DateTime.SpecifyKind(fechaAlta, DateTimeKind.Utc);

        try
        {
            // Enviar el cliente actualizado a la API
            var respuesta = await Http.PutAsJsonAsync($"https://localhost:7123/api/clientes/{cliente.Id}", cliente);

            if (respuesta.IsSuccessStatusCode)
            {
                // Si es exitoso, redirigir al listado de clientes
                Volver();
            }
            else
            {
                // Si ocurre un error lo muestro
                var error = await respuesta.Content.ReadAsStringAsync();
                await Swal.FireAsync("Error", error, SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            // Manejo de excepciones
            await Swal.FireAsync("Error", $"Error al actualizar el cliente: {ex.Message}", SweetAlertIcon.Error);
        }
    }

    public void Volver()
    {
        Navegador.NavigateTo("/clientes");
    }
}
