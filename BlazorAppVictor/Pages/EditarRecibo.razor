@page "/editar-recibo/{numeroRecibo}"
@using BlazorAppVictor.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject SweetAlertService Swal
@inject NavigationManager Navegador

<h3>Editar Recibo</h3>

<!-- Botón Volver -->
<button class="btn btn-secondary mb-3" @onclick="Volver">Volver</button>

@if (recibo == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <EditForm Model="recibo" OnValidSubmit="ActualizarRecibo">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="NumeroRecibo" class="form-label">Número de Recibo</label>
            <InputText id="NumeroRecibo" class="form-control" @bind-Value="recibo.NumeroRecibo" Disabled="true" />
        </div>
        <div class="mb-3">
            <label for="ClienteDNI" class="form-label">DNI del Cliente</label>
            <InputText id="ClienteDNI" class="form-control" @bind-Value="recibo.ClienteDNI" Disabled="true" />
        </div>
        <div class="mb-3">
            <label for="Importe" class="form-label">Importe</label>
            <InputNumber id="Importe" class="form-control" @bind-Value="recibo.Importe" />
        </div>
        <div class="mb-3">
            <label for="FechaEmision" class="form-label">Fecha de Emisión (yyyy/MM/dd HH:mm:ss)</label>
            <InputDate id="FechaEmision" class="form-control" @bind-Value="recibo.FechaEmision" />
        </div>
        <button type="submit" class="btn btn-primary">Actualizar Recibo</button>
    </EditForm>
}

@code {
    [Parameter] public string numeroRecibo { get; set; }
    private Recibo recibo;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Se hace una solicitud GET para obtener el recibo a editar
            recibo = await Http.GetFromJsonAsync<Recibo>($"https://localhost:7123/api/recibos/{numeroRecibo}");
        }
        catch (Exception)
        {
            await Swal.FireAsync("Error", "Error al cargar el recibo.", SweetAlertIcon.Error);
            Navegador.NavigateTo("/recibos");
        }
    }

    private async Task ActualizarRecibo()
    {
        if (recibo.Importe <= 0)
        {
            await Swal.FireAsync("Error", "El importe debe ser mayor a 0.", SweetAlertIcon.Error);
            return;
        }
        try
        {
            // Realizamos la solicitud PUT para actualizar el recibo
            var respuesta = await Http.PutAsJsonAsync($"https://localhost:7123/api/recibos/{recibo.NumeroRecibo}", recibo);
            if (respuesta.IsSuccessStatusCode)
            {
                Navegador.NavigateTo("/recibos");
            }
            else
            {
                var error = await respuesta.Content.ReadAsStringAsync();
                await Swal.FireAsync("Error", error, SweetAlertIcon.Error);
            }
        }
        catch (Exception)
        {
            await Swal.FireAsync("Error", "Error al actualizar el recibo.", SweetAlertIcon.Error);
        }
    }

    void Volver()
    {
        Navegador.NavigateTo("/recibos");
    }
}
