@page "/crear-cliente"
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text.RegularExpressions
@using BlazorAppVictor.Entidades
@using CurrieTechnologies.Razor.SweetAlert2          
@inject HttpClient Http
@inject SweetAlertService Swal
@inject NavigationManager Navegador

<style>
	/* Contenedor del formulario */
	.form-container {
		max-width: 600px;
		margin: 30px auto;
		padding: 20px;
		border: 1px solid #ddd;
		border-radius: 8px;
		background-color: #f9f9f9;
		box-shadow: 0 0 10px rgba(0,0,0,0.1);
	}

	/* Título */
	h3 {
		font-size: 2rem;
		text-align: center;
		margin-top: 20px;
		margin-bottom: 20px;
	}

	/* Botón Volver */
	.volver-btn {
		display: block;
		margin: 0 auto 20px auto;
	}

	.form-label {
		font-weight: bold;
	}

	.mb-3 {
		margin-bottom: 1rem;
	}
</style>

<h3>Crear Cliente</h3>

<!-- Botón Volver -->
<button class="btn btn-secondary volver-btn" @onclick="Volver">Volver</button>

<div class="form-container">
	<!-- Formulario -->
	<form @onsubmit="HandleSubmit">
		<!-- DNI -->
		<div class="mb-3">
			<label for="DNI" class="form-label">DNI (*)</label>
			<input id="DNI" class="form-control" type="text" @bind="cliente.DNI" />
		</div>

		<!-- Nombre -->
		<div class="mb-3">
			<label for="Nombre" class="form-label">Nombre (*)</label>
			<input id="Nombre" class="form-control" type="text" @bind="cliente.Nombre" />
		</div>

		<!-- Apellidos -->
		<div class="mb-3">
			<label for="Apellido1" class="form-label">Apellido 1</label>
			<input id="Apellido1" class="form-control" type="text" @bind="cliente.Apellido1" />
		</div>

		<div class="mb-3">
			<label for="Apellido2" class="form-label">Apellido 2</label>
			<input id="Apellido2" class="form-control" type="text" @bind="cliente.Apellido2" />
		</div>

		<!-- Tipo -->
		<div class="mb-3">
			<label for="Tipo" class="form-label">Tipo de cliente</label>
			<select id="Tipo" class="form-control" @bind="cliente.Tipo">
				<option value="">Seleccione...</option>
				<option value="REGISTRADO">REGISTRADO</option>
				<option value="SOCIO">SOCIO</option>
			</select>
		</div>

		<!-- Cuota máxima -->
		@if (cliente.Tipo == TipoCliente.REGISTRADO)
		{
			<div class="mb-3">
				<label for="CuotaMaxima" class="form-label">Cuota máxima (*)</label>
				<input id="CuotaMaxima" class="form-control" type="number" step="any" @bind="cliente.CuotaMaxima" />
			</div>
		}

		<!-- Fecha de alta -->
		<div class="mb-3">
			<label for="FechaAlta" class="form-label">Fecha de alta (yyyy/MM/dd HH:mm:ss) (*)</label>
			<input id="FechaAlta" class="form-control" type="text" @bind="fechaAltaTexto" />
		</div>

		<!-- Botón Crear -->
		<button type="submit" class="btn btn-success">Crear</button>
	</form>
</div>

@code {
	// Inicializo el cliente a valores por defecto (por usar required)
	private Cliente cliente = new Cliente
		{
			DNI = "",
			Nombre = "",
			Tipo = TipoCliente.REGISTRADO,
			FechaAlta = DateTime.UtcNow
		};

	// Variable con la que manejo la fecha de alta como un texto
	private string? fechaAltaTexto;

	// Clase para deserializar mis errores personalizados de la API 
	public class ErrorResponse
	{
		// Para que coincida con errors del JSON recibido
		[JsonPropertyName("errors")] 
		public Dictionary<string, List<string>> Errors { get; set; } = new();
	}

	// Método que maneja el envío del formulario
	private async Task HandleSubmit(EventArgs e)
	{
		await EnviarCliente();
	}

	// Método para enviar los datos del cliente a la API
	private async Task EnviarCliente()
	{
		// Valido que el DNI no esté vacío
		if (string.IsNullOrWhiteSpace(cliente.DNI))
		{
			await Swal.FireAsync("Error", "El DNI es obligatorio", SweetAlertIcon.Error);
			return;
		}

		// Valido que el nombre no esté vacío
		if (string.IsNullOrWhiteSpace(cliente.Nombre))
		{
			await Swal.FireAsync("Error", "El nombre del cliente es obligatorio", SweetAlertIcon.Error);
			return;
		}

		// Valido la cuota máxima para clientes REGISTRADOS (debe ser mayor que 0)
		if (cliente.Tipo == TipoCliente.REGISTRADO && (!cliente.CuotaMaxima.HasValue || cliente.CuotaMaxima <= 0))
		{
			await Swal.FireAsync("Error", "Los clientes REGISTRADOS deben tener una cuota máxima válida (número positivo mayor que 0)", SweetAlertIcon.Error);
			return;
		}

		// Valido los SOCIOS (no deben tener cuota máxima)
		if (cliente.Tipo == TipoCliente.SOCIO && cliente.CuotaMaxima.HasValue)
		{
			await Swal.FireAsync("Error", "Los SOCIOS no deben tener una cuota máxima.", SweetAlertIcon.Error);
			return;
		}

		// Valido que la fecha de alta no esté vacía
		if (string.IsNullOrWhiteSpace(fechaAltaTexto))
		{
			await Swal.FireAsync("Error", "La fecha de alta es obligatoria", SweetAlertIcon.Error);
			return;
		}

		// Valido el formato de la fecha de alta "yyyy/MM/dd HH:mm:ss"
		if (!DateTime.TryParseExact(fechaAltaTexto, "yyyy/MM/dd HH:mm:ss",
				System.Globalization.CultureInfo.InvariantCulture,
				System.Globalization.DateTimeStyles.None, out DateTime fechaAlta))
		{
			await Swal.FireAsync("Error", "La fecha de alta debe tener el formato 'yyyy/MM/dd HH:mm:ss' y valores lógicos.", SweetAlertIcon.Error);
			return;
		}

		// Convierto la fecha de alta a formato UTC para almacenarla en la base de datos
		cliente.FechaAlta = DateTime.SpecifyKind(fechaAlta, DateTimeKind.Utc);

		try
		{
			// Envío los datos del cliente a la API
			var respuesta = await Http.PostAsJsonAsync("https://localhost:7123/api/clientes", cliente);
			if (respuesta.IsSuccessStatusCode)
			{
				// Si la creación es exitosa muestro un mensaje y vuelvo a la lista de clientes
				await Swal.FireAsync("Éxito", "Cliente creado correctamente.", SweetAlertIcon.Success);
				Volver();
			}
			else
			{
				// Si ocurre un error de validación, extraigo los errores personalizados
				var errorContent = await respuesta.Content.ReadAsStringAsync();
				var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(errorContent);

				// Si no hay errores que se puedan deserializar muestro el contenido completo
				if (errorResponse?.Errors == null || !errorResponse.Errors.Any())
				{
					await Swal.FireAsync("Error", errorContent, SweetAlertIcon.Error);
					return;
				}

				// Muestro los errores separados por ","
				var errorMessage = string.Join(", ", errorResponse.Errors.Select(e => e.Value.FirstOrDefault()));
				await Swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
			}
		}
		catch (Exception ex)
		{
			// Manejo de excepciones
			await Swal.FireAsync("Error", $"Error al crear el cliente: {ex.Message}", SweetAlertIcon.Error);
		}
	}

	// Método para volver a la página de clientes
	public void Volver()
	{
		Navegador.NavigateTo("/clientes");
	}
}